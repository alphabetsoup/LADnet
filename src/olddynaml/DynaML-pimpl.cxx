// Not copyrighted - public domain.
//
// This sample parser implementation was generated by CodeSynthesis XSD,
// an XML Schema to C++ data binding compiler. You may use it in your
// programs without any restrictions.
//

#include "DynaML-pimpl.hxx"

#include <iostream>

// UsesMeasNetwork
//
void UsesMeasNetwork::setMeasNetwork(MeasNetwork * mn)
{
  _mn = mn;
}

// Clusterpoint_pimpl
//

void Clusterpoint_pimpl::
pre ()
{
	if (!_mn) throw std::runtime_error("MeasNetwork not set for YCluster Parser.");
	_y.reset(new YCluster(_mn->_numMeasurements)); // FIXME make nicer way to get ID.

	// init pointcovar counters
	_stnid_ctr = 0;
	_covar_stnid_ctr = 0;
}

void Clusterpoint_pimpl::
X (const ::std::string& X)
{
  std::cout << "X: " << X << std::endl;
}

void Clusterpoint_pimpl::
Y (const ::std::string& Y)
{
  std::cout << "Y: " << Y << std::endl;
}

void Clusterpoint_pimpl::
Z (const ::std::string& Z)
{
  std::cout << "Z: " << Z << std::endl;
}

void Clusterpoint_pimpl::
SigmaXX (const ::std::string& SigmaXX)
{
  std::cout << "SigmaXX: " << SigmaXX << std::endl;
}

void Clusterpoint_pimpl::
SigmaXY (const ::std::string& SigmaXY)
{
  std::cout << "SigmaXY: " << SigmaXY << std::endl;
}

void Clusterpoint_pimpl::
SigmaXZ (const ::std::string& SigmaXZ)
{
  std::cout << "SigmaXZ: " << SigmaXZ << std::endl;
}

void Clusterpoint_pimpl::
SigmaYY (const ::std::string& SigmaYY)
{
  std::cout << "SigmaYY: " << SigmaYY << std::endl;
}

void Clusterpoint_pimpl::
SigmaYZ (const ::std::string& SigmaYZ)
{
  std::cout << "SigmaYZ: " << SigmaYZ << std::endl;
}

void Clusterpoint_pimpl::
SigmaZZ (const ::std::string& SigmaZZ)
{
  std::cout << "SigmaZZ: " << SigmaZZ << std::endl;
}

void Clusterpoint_pimpl::
PointCovariance (const ::arma::mat33& PointCovariance)
{
  // TODO
  //
}

::YCluster& Clusterpoint_pimpl::
post_Clusterpoint ()
{
  // TODO
  //
  // return ... ;
}

// Directions_pimpl
//

void Directions_pimpl::
pre ()
{
	if (!_mn) throw std::runtime_error("MeasNetwork not set for Directions Parser.");
	_d.reset(new Directions(_mn->_numMeasurements)); // FIXME make nicer way to get ID.
}

void Directions_pimpl::
Ignore (const ::std::string& Ignore)
{
  std::cout << "Ignore: " << Ignore << std::endl;
  _d->Ignore = Ignore.length() > 0;
}

void Directions_pimpl::
Target (const ::std::string& Target)
{
  std::cout << "Target: " << Target << std::endl;
  _d->Target = Target;
}

void Directions_pimpl::
Value (const ::std::string& Value)
{
  std::cout << "Value: " << Value << std::endl;
  _d->Value = ::std::stod(Value);
}

void Directions_pimpl::
StdDev (const ::std::string& StdDev)
{
  std::cout << "StdDev: " << StdDev << std::endl;
  _d->StdDev = ::std::stod(StdDev);
}

::Directions& Directions_pimpl::
post_Directions ()
{
  // TODO
  //
  // return ... ;
  return _d.get();
}

// DnaMeasurement_pimpl
//

void DnaMeasurement_pimpl::
pre ()
{
	haschild = false;
	_child = NULL;
	_m.reset(new DnaMeasurement_Struct);
}

void DnaMeasurement_pimpl::
Type (const ::std::string& Type)
{
  std::cout << "Type: " << Type << std::endl;
  _m->_Type = Type;
}

void DnaMeasurement_pimpl::
Ignore (const ::std::string& Ignore)
{
  std::cout << "Ignore: " << Ignore << std::endl;
  _m->_Ignore = Ignore;
}

void DnaMeasurement_pimpl::
First (const ::std::string& First)
{
  std::cout << "First: " << First << std::endl;
  _m->_First = First;
}

void DnaMeasurement_pimpl::
Second (const ::std::string& Second)
{
  std::cout << "Second: " << Second << std::endl;
  _m->_Second = Second;
}

void DnaMeasurement_pimpl::
Third (const ::std::string& Third)
{
  std::cout << "Third: " << Third << std::endl;
  _m->_Third = Third;
}

void DnaMeasurement_pimpl::
Value (const ::std::string& Value)
{
  std::cout << "Value: " << Value << std::endl;
  _m->_Value = Value;
}

void DnaMeasurement_pimpl::
StdDev (const ::std::string& StdDev)
{
  std::cout << "StdDev: " << StdDev << std::endl;
  _m->_StdDev = StdDev;
}

void DnaMeasurement_pimpl::
InstHeight (const ::std::string& InstHeight)
{
  std::cout << "InstHeight: " << InstHeight << std::endl;
  _m->_InstHeight = InstHeight;
}

void DnaMeasurement_pimpl::
TargHeight (const ::std::string& TargHeight)
{
  std::cout << "TargHeight: " << TargHeight << std::endl;
  _m->_TargHeight = TargHeight;
}

void DnaMeasurement_pimpl::
Total (const ::std::string& Total)
{
  std::cout << "Total: " << Total << std::endl;
  _m->_Total = Total;
}

void DnaMeasurement_pimpl::
Directions (::Directions& Directions)
{
  // TODO
  //
  _child = &Directions;
  haschild = true;
}

void DnaMeasurement_pimpl::
Vscale (const ::std::string& Vscale)
{
  std::cout << "Vscale: " << Vscale << std::endl;
  _m->_Vscale = Vscale;
}

void DnaMeasurement_pimpl::
GPSBaseline (::GPSBaseline& GPSBaseline)
{
  // TODO
  //
  _child = &GPSBaseline;
  haschild = true;
}

void DnaMeasurement_pimpl::
Hscale (const ::std::string& Hscale)
{
  std::cout << "Hscale: " << Hscale << std::endl;
  _m->_Hscale = Hscale;
}

void DnaMeasurement_pimpl::
Lscale (const ::std::string& Lscale)
{
  std::cout << "Lscale: " << Lscale << std::endl;
  _m->_Lscale = Lscale;
}

void DnaMeasurement_pimpl::
Pscale (const ::std::string& Pscale)
{
  std::cout << "Pscale: " << Pscale << std::endl;
  _m->_Pscale = Pscale;
}

void DnaMeasurement_pimpl::
Clusterpoint (::YCluster& Clusterpoint)
{
  // TODO
  //
  _child = &Clusterpoint;
  haschild = true;
}

void DnaMeasurement_pimpl::
Coords (const ::std::string& Coords)
{
  std::cout << "Coords: " << Coords << std::endl;
  _m->_Coords = Coords;
}

void DnaMeasurement_pimpl::
Source (const ::std::string& Source)
{
  std::cout << "Source: " << Source << std::endl;
  _m->_Source = Source;
}

void DnaMeasurement_pimpl::
ReferenceFrame (const ::std::string& ReferenceFrame)
{
  std::cout << "ReferenceFrame: " << ReferenceFrame << std::endl;
  _m->_ReferenceFrame = ReferenceFrame;
}

void DnaMeasurement_pimpl::
MeasuredDate (const ::std::string& MeasuredDate)
{
  std::cout << "MeasuredDate: " << MeasuredDate << std::endl;
  _m->_MeasuredDate = MeasuredDate;
}

::DnaMeasurement& DnaMeasurement_pimpl::
post_DnaMeasurement ()
{
  // TODO
  //
  // return ... ;
  if (!haschild) throw ::std::runtime_error("Cannot return measurement: No measurement type has been set.");
  // copy all strings into the child meas.
  _child->Type = _m->_Type[0];
  _child->Ignore = _m->_Ignore.length();
  if (_m->_First.length()) {
	ParameterGroup* P;
    int Index  = _mn->getPointIndex(_m->_First.length(),&P);
    _child->_param.push_back(P);
	P->measJoin.push_back(_child->_id);
	//P->stnJoin.push_back(??);
	//P->edgeJoin.push_back(edge(i,??,??));
  }
  if (_m->_Second.length()) {
	ParameterGroup* P;
    int Index  = _mn->getPointIndex(_m->_Second.length(),&P);
    _child->_param.push_back(P);
	P->measJoin.push_back(_child->_id);
	//P->stnJoin.push_back(??);
	//P->edgeJoin.push_back(edge(i,??,??));
  }
  if (_m->_Third.length()) {
	ParameterGroup* P;
    int Index  = _mn->getPointIndex(_m->_Third.length(),&P);
    _child->_param.push_back(P);
	P->measJoin.push_back(_child->_id);
	//P->stnJoin.push_back(??);
	//P->edgeJoin.push_back(edge(i,??,??));
  }
  //_child->Value = _m->_Value;
  //_child->StdDev = _m->_StdDev;
  //_child->InstHeight = _m->_InstHeight;
  //_child->TargHeight = _m->_TargHeight;
  //_child->Total = _m->_Total;
  _child->Vscale = ::std::stod(_m->_Vscale);
  _child->Hscale = ::std::stod(_m->_Hscale);
  _child->Lscale = ::std::stod(_m->_Lscale);
  _child->Pscale = ::std::stod(_m->_Pscale);
  //_child->Coords = _m->_Coords;
  //_child->Source = _m->_Source;
  //_child->ReferenceFrame = _m->_ReferenceFrame;
  return dynamic_cast<DnaMeasurement&>(*_child);
}

// DnaStation_pimpl
//

void DnaStation_pimpl::
pre ()
{
	if (!_mn) throw std::runtime_error("MeasNetwork not set for Station Parser.");
	_stn.reset(new Station(_mn->_numPoints)); // FIXME make nicer way to get ID.
}

void DnaStation_pimpl::
Name (const ::std::string& Name)
{
  std::cout << "Name: " << Name << std::endl;
  _stn->name = Name;
}

void DnaStation_pimpl::
Constraints (const ::std::string& Constraints)
{
  std::cout << "Constraints: " << Constraints << std::endl;
  // Do nothing
}

void DnaStation_pimpl::
Type (const ::std::string& Type)
{
  std::cout << "Type: " << Type << std::endl;
  // Do nothing.
}

void DnaStation_pimpl::
StationCoord (const ::std::map<::std::string,::std::string>& StationCoord)
{
  // TODO
  // Fetch all elements and assign to the station.
  
}

void DnaStation_pimpl::
Description (const ::std::string& Description)
{
  std::cout << "Description: " << Description << std::endl;
}

::Station& DnaStation_pimpl::
post_DnaStation ()
{
  // TODO
  //
  // return ... ;
}

// DnaXmlFormat_pimpl
//

void DnaXmlFormat_pimpl::
pre ()
{
}

void DnaXmlFormat_pimpl::
DnaStation (::Station& DnaStation)
{
  // TODO
  //
}

void DnaXmlFormat_pimpl::
DnaMeasurement (::DnaMeasurement& DnaMeasurement)
{
  // TODO
  //
}

void DnaXmlFormat_pimpl::
type ()
{
}

void DnaXmlFormat_pimpl::
post_DnaXmlFormat ()
{
}

// GPSBaseline_pimpl
//

void GPSBaseline_pimpl::
pre ()
{
	if (!_mn) throw std::runtime_error("MeasNetwork not set for GPSBaseline Parser.");
	_bl.reset(new GPSBaseline(_mn->_numMeasurements)); // FIXME make nicer way to get ID.
}

void GPSBaseline_pimpl::
X (const ::std::string& X)
{
  std::cout << "X: " << X << std::endl;
  _bl->_components[0] = std::stod(X);
}

void GPSBaseline_pimpl::
Y (const ::std::string& Y)
{
  std::cout << "Y: " << Y << std::endl;
  _bl->_components[0] = std::stod(Y);
}

void GPSBaseline_pimpl::
Z (const ::std::string& Z)
{
  std::cout << "Z: " << Z << std::endl;
  _bl->_components[0] = std::stod(Z);
}

void GPSBaseline_pimpl::
SigmaXX (const ::std::string& SigmaXX)
{
  std::cout << "SigmaXX: " << SigmaXX << std::endl;
  _bl->SigmaXX = std::stod(SigmaXX);
}

void GPSBaseline_pimpl::
SigmaXY (const ::std::string& SigmaXY)
{
  std::cout << "SigmaXY: " << SigmaXY << std::endl;
  _bl->SigmaXY = std::stod(SigmaXY);
}

void GPSBaseline_pimpl::
SigmaXZ (const ::std::string& SigmaXZ)
{
  std::cout << "SigmaXZ: " << SigmaXZ << std::endl;
  _bl->SigmaXZ = std::stod(SigmaXZ);
}

void GPSBaseline_pimpl::
SigmaYY (const ::std::string& SigmaYY)
{
  std::cout << "SigmaYY: " << SigmaYY << std::endl;
  _bl->SigmaYY = std::stod(SigmaYY);
}

void GPSBaseline_pimpl::
SigmaYZ (const ::std::string& SigmaYZ)
{
  std::cout << "SigmaYZ: " << SigmaYZ << std::endl;
  _bl->SigmaYZ = std::stod(SigmaYZ);
}

void GPSBaseline_pimpl::
SigmaZZ (const ::std::string& SigmaZZ)
{
  std::cout << "SigmaZZ: " << SigmaZZ << std::endl;
  _bl->SigmaZZ = std::stod(SigmaZZ);
}

void GPSBaseline_pimpl::
GPSCovariance (const ::arma::mat33& GPSCovariance)
{
  // TODO
  //
}

::GPSBaseline& GPSBaseline_pimpl::
post_GPSBaseline ()
{
  // TODO
  //
  // return ... ;
  double rawVCV[6];
				
  rawVCV[0] = _bl->SigmaXX;
  rawVCV[1] = _bl->SigmaXY;
  rawVCV[2] = _bl->SigmaXZ;
  rawVCV[3] = _bl->SigmaYY;
  rawVCV[4] = _bl->SigmaYZ;
  rawVCV[5] = _bl->SigmaZZ;

  // FIXME use correct flag/test for a default vcv for GPS baselines
  _bl->setRawVCV(rawVCV);

  return *(_bl.get());
}

// GPSCovariance_pimpl
//

void GPSCovariance_pimpl::
pre ()
{
  _pointcovar.zeros();
}

void GPSCovariance_pimpl::
m11 (const ::std::string& m11)
{
  std::cout << "m11: " << m11 << std::endl;
  _pointcovar(0,0) = ::std::stod(m11);
}

void GPSCovariance_pimpl::
m12 (const ::std::string& m12)
{
  std::cout << "m12: " << m12 << std::endl;
  _pointcovar(0,1) = ::std::stod(m12);
}

void GPSCovariance_pimpl::
m13 (const ::std::string& m13)
{
  std::cout << "m13: " << m13 << std::endl;
  _pointcovar(0,2) = ::std::stod(m13);
}

void GPSCovariance_pimpl::
m21 (const ::std::string& m21)
{
  std::cout << "m21: " << m21 << std::endl;
  _pointcovar(1,0) = ::std::stod(m21);
}

void GPSCovariance_pimpl::
m22 (const ::std::string& m22)
{
  std::cout << "m22: " << m22 << std::endl;
  _pointcovar(1,1) = ::std::stod(m22);
}

void GPSCovariance_pimpl::
m23 (const ::std::string& m23)
{
  std::cout << "m23: " << m23 << std::endl;
  _pointcovar(1,2) = ::std::stod(m23);
}

void GPSCovariance_pimpl::
m31 (const ::std::string& m31)
{
  std::cout << "m31: " << m31 << std::endl;
  _pointcovar(2,0) = ::std::stod(m31);
}

void GPSCovariance_pimpl::
m32 (const ::std::string& m32)
{
  std::cout << "m32: " << m32 << std::endl;
  _pointcovar(2,1) = ::std::stod(m32);
}

void GPSCovariance_pimpl::
m33 (const ::std::string& m33)
{
  std::cout << "m33: " << m33 << std::endl;
  _pointcovar(2,2) = ::std::stod(m33);
}

::arma::mat33 GPSCovariance_pimpl::
post_GPSCovariance ()
{
  // TODO
  //
  // return ... ;
  return _pointcovar;
}

// PointCovariance_pimpl
//

void PointCovariance_pimpl::
pre ()
{
  _pointcovar.zeros();
}

void PointCovariance_pimpl::
m11 (const ::std::string& m11)
{
  std::cout << "m11: " << m11 << std::endl;
  _pointcovar(0,0) = ::std::stod(m11);
}

void PointCovariance_pimpl::
m12 (const ::std::string& m12)
{
  std::cout << "m12: " << m12 << std::endl;
  _pointcovar(0,1) = ::std::stod(m12);
}

void PointCovariance_pimpl::
m13 (const ::std::string& m13)
{
  std::cout << "m13: " << m13 << std::endl;
  _pointcovar(0,2) = ::std::stod(m13);
}

void PointCovariance_pimpl::
m21 (const ::std::string& m21)
{
  std::cout << "m21: " << m21 << std::endl;
  _pointcovar(1,0) = ::std::stod(m21);
}

void PointCovariance_pimpl::
m22 (const ::std::string& m22)
{
  std::cout << "m22: " << m22 << std::endl;
  _pointcovar(1,1) = ::std::stod(m22);
}

void PointCovariance_pimpl::
m23 (const ::std::string& m23)
{
  std::cout << "m23: " << m23 << std::endl;
  _pointcovar(1,2) = ::std::stod(m23);
}

void PointCovariance_pimpl::
m31 (const ::std::string& m31)
{
  std::cout << "m31: " << m31 << std::endl;
  _pointcovar(2,0) = ::std::stod(m31);
}

void PointCovariance_pimpl::
m32 (const ::std::string& m32)
{
  std::cout << "m32: " << m32 << std::endl;
  _pointcovar(2,1) = ::std::stod(m32);
}

void PointCovariance_pimpl::
m33 (const ::std::string& m33)
{
  std::cout << "m33: " << m33 << std::endl;
  _pointcovar(2,2) = ::std::stod(m33);
}

::arma::mat33 PointCovariance_pimpl::
post_PointCovariance ()
{
  // TODO
  //
  // return ... ;
  return _pointcovar;
}

// StationCoord_pimpl
//

void StationCoord_pimpl::
pre ()
{
	_stncoord.clear()
}

void StationCoord_pimpl::
Name (const ::std::string& Name)
{
  std::cout << "Name: " << Name << std::endl;
  this->_stncoord.insert(::std::pair<::std::string,::std::string>("Name",Name));
}

void StationCoord_pimpl::
XAxis (const ::std::string& XAxis)
{
  std::cout << "XAxis: " << XAxis << std::endl;
  this->_stncoord.insert(::std::pair<::std::string,::std::string>("XAxis",XAxis));
}

void StationCoord_pimpl::
YAxis (const ::std::string& YAxis)
{
  std::cout << "YAxis: " << YAxis << std::endl;
  this->_stncoord.insert(::std::pair<::std::string,::std::string>("YAxis",YAxis));
}

void StationCoord_pimpl::
Height (const ::std::string& Height)
{
  std::cout << "Height: " << Height << std::endl;
  this->_stncoord.insert(::std::pair<::std::string,::std::string>("Height",Height));
}

void StationCoord_pimpl::
HemisphereZone (const ::std::string& HemisphereZone)
{
  std::cout << "HemisphereZone: " << HemisphereZone << std::endl;
  this->_stncoord.insert(::std::pair<::std::string,::std::string>("HemisphereZone",HemisphereZone));
}

::std::map<::std::string,::std::string> StationCoord_pimpl::
post_StationCoord ()
{
  // TODO
  //
  // return ... ;
	return _stncoord;
}

// type_pimpl
//

void type_pimpl::
pre ()
{
}

void type_pimpl::
post_type ()
{
  const ::std::string& v (post_string ());

  std::cout << "type: " << v << std::endl;
}

