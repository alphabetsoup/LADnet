// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "DynaML-pskel.hxx"

#include "XMLStructs.h"

// Clusterpoint_pskel
//

void Clusterpoint_pskel::
X_parser (::xml_schema::string_pskel& p)
{
  this->X_parser_ = &p;
}

void Clusterpoint_pskel::
X_parser (const ::xml_schema::parser_map& m)
{
  this->X_parser_map_ = &m;
}

void Clusterpoint_pskel::
Y_parser (::xml_schema::string_pskel& p)
{
  this->Y_parser_ = &p;
}

void Clusterpoint_pskel::
Y_parser (const ::xml_schema::parser_map& m)
{
  this->Y_parser_map_ = &m;
}

void Clusterpoint_pskel::
Z_parser (::xml_schema::string_pskel& p)
{
  this->Z_parser_ = &p;
}

void Clusterpoint_pskel::
Z_parser (const ::xml_schema::parser_map& m)
{
  this->Z_parser_map_ = &m;
}

void Clusterpoint_pskel::
SigmaXX_parser (::xml_schema::string_pskel& p)
{
  this->SigmaXX_parser_ = &p;
}

void Clusterpoint_pskel::
SigmaXX_parser (const ::xml_schema::parser_map& m)
{
  this->SigmaXX_parser_map_ = &m;
}

void Clusterpoint_pskel::
SigmaXY_parser (::xml_schema::string_pskel& p)
{
  this->SigmaXY_parser_ = &p;
}

void Clusterpoint_pskel::
SigmaXY_parser (const ::xml_schema::parser_map& m)
{
  this->SigmaXY_parser_map_ = &m;
}

void Clusterpoint_pskel::
SigmaXZ_parser (::xml_schema::string_pskel& p)
{
  this->SigmaXZ_parser_ = &p;
}

void Clusterpoint_pskel::
SigmaXZ_parser (const ::xml_schema::parser_map& m)
{
  this->SigmaXZ_parser_map_ = &m;
}

void Clusterpoint_pskel::
SigmaYY_parser (::xml_schema::string_pskel& p)
{
  this->SigmaYY_parser_ = &p;
}

void Clusterpoint_pskel::
SigmaYY_parser (const ::xml_schema::parser_map& m)
{
  this->SigmaYY_parser_map_ = &m;
}

void Clusterpoint_pskel::
SigmaYZ_parser (::xml_schema::string_pskel& p)
{
  this->SigmaYZ_parser_ = &p;
}

void Clusterpoint_pskel::
SigmaYZ_parser (const ::xml_schema::parser_map& m)
{
  this->SigmaYZ_parser_map_ = &m;
}

void Clusterpoint_pskel::
SigmaZZ_parser (::xml_schema::string_pskel& p)
{
  this->SigmaZZ_parser_ = &p;
}

void Clusterpoint_pskel::
SigmaZZ_parser (const ::xml_schema::parser_map& m)
{
  this->SigmaZZ_parser_map_ = &m;
}

void Clusterpoint_pskel::
PointCovariance_parser (::PointCovariance_pskel& p)
{
  this->PointCovariance_parser_ = &p;
}

void Clusterpoint_pskel::
parsers (::xml_schema::string_pskel& X,
         ::xml_schema::string_pskel& Y,
         ::xml_schema::string_pskel& Z,
         ::xml_schema::string_pskel& SigmaXX,
         ::xml_schema::string_pskel& SigmaXY,
         ::xml_schema::string_pskel& SigmaXZ,
         ::xml_schema::string_pskel& SigmaYY,
         ::xml_schema::string_pskel& SigmaYZ,
         ::xml_schema::string_pskel& SigmaZZ,
         ::PointCovariance_pskel& PointCovariance)
{
  this->X_parser_ = &X;
  this->Y_parser_ = &Y;
  this->Z_parser_ = &Z;
  this->SigmaXX_parser_ = &SigmaXX;
  this->SigmaXY_parser_ = &SigmaXY;
  this->SigmaXZ_parser_ = &SigmaXZ;
  this->SigmaYY_parser_ = &SigmaYY;
  this->SigmaYZ_parser_ = &SigmaYZ;
  this->SigmaZZ_parser_ = &SigmaZZ;
  this->PointCovariance_parser_ = &PointCovariance;
}

Clusterpoint_pskel::
Clusterpoint_pskel ()
: X_parser_ (0),
  X_parser_map_ (0),
  Y_parser_ (0),
  Y_parser_map_ (0),
  Z_parser_ (0),
  Z_parser_map_ (0),
  SigmaXX_parser_ (0),
  SigmaXX_parser_map_ (0),
  SigmaXY_parser_ (0),
  SigmaXY_parser_map_ (0),
  SigmaXZ_parser_ (0),
  SigmaXZ_parser_map_ (0),
  SigmaYY_parser_ (0),
  SigmaYY_parser_map_ (0),
  SigmaYZ_parser_ (0),
  SigmaYZ_parser_map_ (0),
  SigmaZZ_parser_ (0),
  SigmaZZ_parser_map_ (0),
  PointCovariance_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// Directions_pskel
//

void Directions_pskel::
Ignore_parser (::xml_schema::string_pskel& p)
{
  this->Ignore_parser_ = &p;
}

void Directions_pskel::
Ignore_parser (const ::xml_schema::parser_map& m)
{
  this->Ignore_parser_map_ = &m;
}

void Directions_pskel::
Target_parser (::xml_schema::string_pskel& p)
{
  this->Target_parser_ = &p;
}

void Directions_pskel::
Target_parser (const ::xml_schema::parser_map& m)
{
  this->Target_parser_map_ = &m;
}

void Directions_pskel::
Value_parser (::xml_schema::string_pskel& p)
{
  this->Value_parser_ = &p;
}

void Directions_pskel::
Value_parser (const ::xml_schema::parser_map& m)
{
  this->Value_parser_map_ = &m;
}

void Directions_pskel::
StdDev_parser (::xml_schema::string_pskel& p)
{
  this->StdDev_parser_ = &p;
}

void Directions_pskel::
StdDev_parser (const ::xml_schema::parser_map& m)
{
  this->StdDev_parser_map_ = &m;
}

void Directions_pskel::
parsers (::xml_schema::string_pskel& Ignore,
         ::xml_schema::string_pskel& Target,
         ::xml_schema::string_pskel& Value,
         ::xml_schema::string_pskel& StdDev)
{
  this->Ignore_parser_ = &Ignore;
  this->Target_parser_ = &Target;
  this->Value_parser_ = &Value;
  this->StdDev_parser_ = &StdDev;
}

Directions_pskel::
Directions_pskel ()
: Ignore_parser_ (0),
  Ignore_parser_map_ (0),
  Target_parser_ (0),
  Target_parser_map_ (0),
  Value_parser_ (0),
  Value_parser_map_ (0),
  StdDev_parser_ (0),
  StdDev_parser_map_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// DnaMeasurement_pskel
//

void DnaMeasurement_pskel::
Type_parser (::xml_schema::string_pskel& p)
{
  this->Type_parser_ = &p;
}

void DnaMeasurement_pskel::
Type_parser (const ::xml_schema::parser_map& m)
{
  this->Type_parser_map_ = &m;
}

void DnaMeasurement_pskel::
Ignore_parser (::xml_schema::string_pskel& p)
{
  this->Ignore_parser_ = &p;
}

void DnaMeasurement_pskel::
Ignore_parser (const ::xml_schema::parser_map& m)
{
  this->Ignore_parser_map_ = &m;
}

void DnaMeasurement_pskel::
First_parser (::xml_schema::string_pskel& p)
{
  this->First_parser_ = &p;
}

void DnaMeasurement_pskel::
First_parser (const ::xml_schema::parser_map& m)
{
  this->First_parser_map_ = &m;
}

void DnaMeasurement_pskel::
Second_parser (::xml_schema::string_pskel& p)
{
  this->Second_parser_ = &p;
}

void DnaMeasurement_pskel::
Second_parser (const ::xml_schema::parser_map& m)
{
  this->Second_parser_map_ = &m;
}

void DnaMeasurement_pskel::
Third_parser (::xml_schema::string_pskel& p)
{
  this->Third_parser_ = &p;
}

void DnaMeasurement_pskel::
Third_parser (const ::xml_schema::parser_map& m)
{
  this->Third_parser_map_ = &m;
}

void DnaMeasurement_pskel::
Value_parser (::xml_schema::string_pskel& p)
{
  this->Value_parser_ = &p;
}

void DnaMeasurement_pskel::
Value_parser (const ::xml_schema::parser_map& m)
{
  this->Value_parser_map_ = &m;
}

void DnaMeasurement_pskel::
StdDev_parser (::xml_schema::string_pskel& p)
{
  this->StdDev_parser_ = &p;
}

void DnaMeasurement_pskel::
StdDev_parser (const ::xml_schema::parser_map& m)
{
  this->StdDev_parser_map_ = &m;
}

void DnaMeasurement_pskel::
InstHeight_parser (::xml_schema::string_pskel& p)
{
  this->InstHeight_parser_ = &p;
}

void DnaMeasurement_pskel::
InstHeight_parser (const ::xml_schema::parser_map& m)
{
  this->InstHeight_parser_map_ = &m;
}

void DnaMeasurement_pskel::
TargHeight_parser (::xml_schema::string_pskel& p)
{
  this->TargHeight_parser_ = &p;
}

void DnaMeasurement_pskel::
TargHeight_parser (const ::xml_schema::parser_map& m)
{
  this->TargHeight_parser_map_ = &m;
}

void DnaMeasurement_pskel::
Total_parser (::xml_schema::string_pskel& p)
{
  this->Total_parser_ = &p;
}

void DnaMeasurement_pskel::
Total_parser (const ::xml_schema::parser_map& m)
{
  this->Total_parser_map_ = &m;
}

void DnaMeasurement_pskel::
Directions_parser (::Directions_pskel& p)
{
  this->Directions_parser_ = &p;
}

void DnaMeasurement_pskel::
Vscale_parser (::xml_schema::string_pskel& p)
{
  this->Vscale_parser_ = &p;
}

void DnaMeasurement_pskel::
Vscale_parser (const ::xml_schema::parser_map& m)
{
  this->Vscale_parser_map_ = &m;
}

void DnaMeasurement_pskel::
GPSBaseline_parser (::GPSBaseline_pskel& p)
{
  this->GPSBaseline_parser_ = &p;
}

void DnaMeasurement_pskel::
Hscale_parser (::xml_schema::string_pskel& p)
{
  this->Hscale_parser_ = &p;
}

void DnaMeasurement_pskel::
Hscale_parser (const ::xml_schema::parser_map& m)
{
  this->Hscale_parser_map_ = &m;
}

void DnaMeasurement_pskel::
Lscale_parser (::xml_schema::string_pskel& p)
{
  this->Lscale_parser_ = &p;
}

void DnaMeasurement_pskel::
Lscale_parser (const ::xml_schema::parser_map& m)
{
  this->Lscale_parser_map_ = &m;
}

void DnaMeasurement_pskel::
Pscale_parser (::xml_schema::string_pskel& p)
{
  this->Pscale_parser_ = &p;
}

void DnaMeasurement_pskel::
Pscale_parser (const ::xml_schema::parser_map& m)
{
  this->Pscale_parser_map_ = &m;
}

void DnaMeasurement_pskel::
Clusterpoint_parser (::Clusterpoint_pskel& p)
{
  this->Clusterpoint_parser_ = &p;
}

void DnaMeasurement_pskel::
Coords_parser (::xml_schema::string_pskel& p)
{
  this->Coords_parser_ = &p;
}

void DnaMeasurement_pskel::
Coords_parser (const ::xml_schema::parser_map& m)
{
  this->Coords_parser_map_ = &m;
}

void DnaMeasurement_pskel::
Source_parser (::xml_schema::string_pskel& p)
{
  this->Source_parser_ = &p;
}

void DnaMeasurement_pskel::
Source_parser (const ::xml_schema::parser_map& m)
{
  this->Source_parser_map_ = &m;
}

void DnaMeasurement_pskel::
ReferenceFrame_parser (::xml_schema::string_pskel& p)
{
  this->ReferenceFrame_parser_ = &p;
}

void DnaMeasurement_pskel::
ReferenceFrame_parser (const ::xml_schema::parser_map& m)
{
  this->ReferenceFrame_parser_map_ = &m;
}

void DnaMeasurement_pskel::
MeasuredDate_parser (::xml_schema::string_pskel& p)
{
  this->MeasuredDate_parser_ = &p;
}

void DnaMeasurement_pskel::
MeasuredDate_parser (const ::xml_schema::parser_map& m)
{
  this->MeasuredDate_parser_map_ = &m;
}

void DnaMeasurement_pskel::
parsers (::xml_schema::string_pskel& Type,
         ::xml_schema::string_pskel& Ignore,
         ::xml_schema::string_pskel& First,
         ::xml_schema::string_pskel& Second,
         ::xml_schema::string_pskel& Third,
         ::xml_schema::string_pskel& Value,
         ::xml_schema::string_pskel& StdDev,
         ::xml_schema::string_pskel& InstHeight,
         ::xml_schema::string_pskel& TargHeight,
         ::xml_schema::string_pskel& Total,
         ::Directions_pskel& Directions,
         ::xml_schema::string_pskel& Vscale,
         ::GPSBaseline_pskel& GPSBaseline,
         ::xml_schema::string_pskel& Hscale,
         ::xml_schema::string_pskel& Lscale,
         ::xml_schema::string_pskel& Pscale,
         ::Clusterpoint_pskel& Clusterpoint,
         ::xml_schema::string_pskel& Coords,
         ::xml_schema::string_pskel& Source,
         ::xml_schema::string_pskel& ReferenceFrame,
         ::xml_schema::string_pskel& MeasuredDate)
{
  this->Type_parser_ = &Type;
  this->Ignore_parser_ = &Ignore;
  this->First_parser_ = &First;
  this->Second_parser_ = &Second;
  this->Third_parser_ = &Third;
  this->Value_parser_ = &Value;
  this->StdDev_parser_ = &StdDev;
  this->InstHeight_parser_ = &InstHeight;
  this->TargHeight_parser_ = &TargHeight;
  this->Total_parser_ = &Total;
  this->Directions_parser_ = &Directions;
  this->Vscale_parser_ = &Vscale;
  this->GPSBaseline_parser_ = &GPSBaseline;
  this->Hscale_parser_ = &Hscale;
  this->Lscale_parser_ = &Lscale;
  this->Pscale_parser_ = &Pscale;
  this->Clusterpoint_parser_ = &Clusterpoint;
  this->Coords_parser_ = &Coords;
  this->Source_parser_ = &Source;
  this->ReferenceFrame_parser_ = &ReferenceFrame;
  this->MeasuredDate_parser_ = &MeasuredDate;
}

DnaMeasurement_pskel::
DnaMeasurement_pskel ()
: Type_parser_ (0),
  Type_parser_map_ (0),
  Ignore_parser_ (0),
  Ignore_parser_map_ (0),
  First_parser_ (0),
  First_parser_map_ (0),
  Second_parser_ (0),
  Second_parser_map_ (0),
  Third_parser_ (0),
  Third_parser_map_ (0),
  Value_parser_ (0),
  Value_parser_map_ (0),
  StdDev_parser_ (0),
  StdDev_parser_map_ (0),
  InstHeight_parser_ (0),
  InstHeight_parser_map_ (0),
  TargHeight_parser_ (0),
  TargHeight_parser_map_ (0),
  Total_parser_ (0),
  Total_parser_map_ (0),
  Directions_parser_ (0),
  Vscale_parser_ (0),
  Vscale_parser_map_ (0),
  GPSBaseline_parser_ (0),
  Hscale_parser_ (0),
  Hscale_parser_map_ (0),
  Lscale_parser_ (0),
  Lscale_parser_map_ (0),
  Pscale_parser_ (0),
  Pscale_parser_map_ (0),
  Clusterpoint_parser_ (0),
  Coords_parser_ (0),
  Coords_parser_map_ (0),
  Source_parser_ (0),
  Source_parser_map_ (0),
  ReferenceFrame_parser_ (0),
  ReferenceFrame_parser_map_ (0),
  MeasuredDate_parser_ (0),
  MeasuredDate_parser_map_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// DnaStation_pskel
//

void DnaStation_pskel::
Name_parser (::xml_schema::string_pskel& p)
{
  this->Name_parser_ = &p;
}

void DnaStation_pskel::
Name_parser (const ::xml_schema::parser_map& m)
{
  this->Name_parser_map_ = &m;
}

void DnaStation_pskel::
Constraints_parser (::xml_schema::string_pskel& p)
{
  this->Constraints_parser_ = &p;
}

void DnaStation_pskel::
Constraints_parser (const ::xml_schema::parser_map& m)
{
  this->Constraints_parser_map_ = &m;
}

void DnaStation_pskel::
Type_parser (::xml_schema::string_pskel& p)
{
  this->Type_parser_ = &p;
}

void DnaStation_pskel::
Type_parser (const ::xml_schema::parser_map& m)
{
  this->Type_parser_map_ = &m;
}

void DnaStation_pskel::
StationCoord_parser (::StationCoord_pskel& p)
{
  this->StationCoord_parser_ = &p;
}

void DnaStation_pskel::
Description_parser (::xml_schema::string_pskel& p)
{
  this->Description_parser_ = &p;
}

void DnaStation_pskel::
Description_parser (const ::xml_schema::parser_map& m)
{
  this->Description_parser_map_ = &m;
}

void DnaStation_pskel::
parsers (::xml_schema::string_pskel& Name,
         ::xml_schema::string_pskel& Constraints,
         ::xml_schema::string_pskel& Type,
         ::StationCoord_pskel& StationCoord,
         ::xml_schema::string_pskel& Description)
{
  this->Name_parser_ = &Name;
  this->Constraints_parser_ = &Constraints;
  this->Type_parser_ = &Type;
  this->StationCoord_parser_ = &StationCoord;
  this->Description_parser_ = &Description;
}

DnaStation_pskel::
DnaStation_pskel ()
: Name_parser_ (0),
  Name_parser_map_ (0),
  Constraints_parser_ (0),
  Constraints_parser_map_ (0),
  Type_parser_ (0),
  Type_parser_map_ (0),
  StationCoord_parser_ (0),
  Description_parser_ (0),
  Description_parser_map_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// DnaXmlFormat_pskel
//

void DnaXmlFormat_pskel::
DnaStation_parser (::DnaStation_pskel& p)
{
  this->DnaStation_parser_ = &p;
}

void DnaXmlFormat_pskel::
DnaMeasurement_parser (::DnaMeasurement_pskel& p)
{
  this->DnaMeasurement_parser_ = &p;
}

void DnaXmlFormat_pskel::
type_parser (::type_pskel& p)
{
  this->type_parser_ = &p;
}

void DnaXmlFormat_pskel::
parsers (::DnaStation_pskel& DnaStation,
         ::DnaMeasurement_pskel& DnaMeasurement,
         ::type_pskel& type)
{
  this->DnaStation_parser_ = &DnaStation;
  this->DnaMeasurement_parser_ = &DnaMeasurement;
  this->type_parser_ = &type;
}

DnaXmlFormat_pskel::
DnaXmlFormat_pskel ()
: DnaStation_parser_ (0),
  DnaMeasurement_parser_ (0),
  type_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_),
  v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
{
}

// GPSBaseline_pskel
//

void GPSBaseline_pskel::
X_parser (::xml_schema::string_pskel& p)
{
  this->X_parser_ = &p;
}

void GPSBaseline_pskel::
X_parser (const ::xml_schema::parser_map& m)
{
  this->X_parser_map_ = &m;
}

void GPSBaseline_pskel::
Y_parser (::xml_schema::string_pskel& p)
{
  this->Y_parser_ = &p;
}

void GPSBaseline_pskel::
Y_parser (const ::xml_schema::parser_map& m)
{
  this->Y_parser_map_ = &m;
}

void GPSBaseline_pskel::
Z_parser (::xml_schema::string_pskel& p)
{
  this->Z_parser_ = &p;
}

void GPSBaseline_pskel::
Z_parser (const ::xml_schema::parser_map& m)
{
  this->Z_parser_map_ = &m;
}

void GPSBaseline_pskel::
SigmaXX_parser (::xml_schema::string_pskel& p)
{
  this->SigmaXX_parser_ = &p;
}

void GPSBaseline_pskel::
SigmaXX_parser (const ::xml_schema::parser_map& m)
{
  this->SigmaXX_parser_map_ = &m;
}

void GPSBaseline_pskel::
SigmaXY_parser (::xml_schema::string_pskel& p)
{
  this->SigmaXY_parser_ = &p;
}

void GPSBaseline_pskel::
SigmaXY_parser (const ::xml_schema::parser_map& m)
{
  this->SigmaXY_parser_map_ = &m;
}

void GPSBaseline_pskel::
SigmaXZ_parser (::xml_schema::string_pskel& p)
{
  this->SigmaXZ_parser_ = &p;
}

void GPSBaseline_pskel::
SigmaXZ_parser (const ::xml_schema::parser_map& m)
{
  this->SigmaXZ_parser_map_ = &m;
}

void GPSBaseline_pskel::
SigmaYY_parser (::xml_schema::string_pskel& p)
{
  this->SigmaYY_parser_ = &p;
}

void GPSBaseline_pskel::
SigmaYY_parser (const ::xml_schema::parser_map& m)
{
  this->SigmaYY_parser_map_ = &m;
}

void GPSBaseline_pskel::
SigmaYZ_parser (::xml_schema::string_pskel& p)
{
  this->SigmaYZ_parser_ = &p;
}

void GPSBaseline_pskel::
SigmaYZ_parser (const ::xml_schema::parser_map& m)
{
  this->SigmaYZ_parser_map_ = &m;
}

void GPSBaseline_pskel::
SigmaZZ_parser (::xml_schema::string_pskel& p)
{
  this->SigmaZZ_parser_ = &p;
}

void GPSBaseline_pskel::
SigmaZZ_parser (const ::xml_schema::parser_map& m)
{
  this->SigmaZZ_parser_map_ = &m;
}

void GPSBaseline_pskel::
GPSCovariance_parser (::GPSCovariance_pskel& p)
{
  this->GPSCovariance_parser_ = &p;
}

void GPSBaseline_pskel::
parsers (::xml_schema::string_pskel& X,
         ::xml_schema::string_pskel& Y,
         ::xml_schema::string_pskel& Z,
         ::xml_schema::string_pskel& SigmaXX,
         ::xml_schema::string_pskel& SigmaXY,
         ::xml_schema::string_pskel& SigmaXZ,
         ::xml_schema::string_pskel& SigmaYY,
         ::xml_schema::string_pskel& SigmaYZ,
         ::xml_schema::string_pskel& SigmaZZ,
         ::GPSCovariance_pskel& GPSCovariance)
{
  this->X_parser_ = &X;
  this->Y_parser_ = &Y;
  this->Z_parser_ = &Z;
  this->SigmaXX_parser_ = &SigmaXX;
  this->SigmaXY_parser_ = &SigmaXY;
  this->SigmaXZ_parser_ = &SigmaXZ;
  this->SigmaYY_parser_ = &SigmaYY;
  this->SigmaYZ_parser_ = &SigmaYZ;
  this->SigmaZZ_parser_ = &SigmaZZ;
  this->GPSCovariance_parser_ = &GPSCovariance;
}

GPSBaseline_pskel::
GPSBaseline_pskel ()
: X_parser_ (0),
  X_parser_map_ (0),
  Y_parser_ (0),
  Y_parser_map_ (0),
  Z_parser_ (0),
  Z_parser_map_ (0),
  SigmaXX_parser_ (0),
  SigmaXX_parser_map_ (0),
  SigmaXY_parser_ (0),
  SigmaXY_parser_map_ (0),
  SigmaXZ_parser_ (0),
  SigmaXZ_parser_map_ (0),
  SigmaYY_parser_ (0),
  SigmaYY_parser_map_ (0),
  SigmaYZ_parser_ (0),
  SigmaYZ_parser_map_ (0),
  SigmaZZ_parser_ (0),
  SigmaZZ_parser_map_ (0),
  GPSCovariance_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// GPSCovariance_pskel
//

void GPSCovariance_pskel::
m11_parser (::xml_schema::string_pskel& p)
{
  this->m11_parser_ = &p;
}

void GPSCovariance_pskel::
m11_parser (const ::xml_schema::parser_map& m)
{
  this->m11_parser_map_ = &m;
}

void GPSCovariance_pskel::
m12_parser (::xml_schema::string_pskel& p)
{
  this->m12_parser_ = &p;
}

void GPSCovariance_pskel::
m12_parser (const ::xml_schema::parser_map& m)
{
  this->m12_parser_map_ = &m;
}

void GPSCovariance_pskel::
m13_parser (::xml_schema::string_pskel& p)
{
  this->m13_parser_ = &p;
}

void GPSCovariance_pskel::
m13_parser (const ::xml_schema::parser_map& m)
{
  this->m13_parser_map_ = &m;
}

void GPSCovariance_pskel::
m21_parser (::xml_schema::string_pskel& p)
{
  this->m21_parser_ = &p;
}

void GPSCovariance_pskel::
m21_parser (const ::xml_schema::parser_map& m)
{
  this->m21_parser_map_ = &m;
}

void GPSCovariance_pskel::
m22_parser (::xml_schema::string_pskel& p)
{
  this->m22_parser_ = &p;
}

void GPSCovariance_pskel::
m22_parser (const ::xml_schema::parser_map& m)
{
  this->m22_parser_map_ = &m;
}

void GPSCovariance_pskel::
m23_parser (::xml_schema::string_pskel& p)
{
  this->m23_parser_ = &p;
}

void GPSCovariance_pskel::
m23_parser (const ::xml_schema::parser_map& m)
{
  this->m23_parser_map_ = &m;
}

void GPSCovariance_pskel::
m31_parser (::xml_schema::string_pskel& p)
{
  this->m31_parser_ = &p;
}

void GPSCovariance_pskel::
m31_parser (const ::xml_schema::parser_map& m)
{
  this->m31_parser_map_ = &m;
}

void GPSCovariance_pskel::
m32_parser (::xml_schema::string_pskel& p)
{
  this->m32_parser_ = &p;
}

void GPSCovariance_pskel::
m32_parser (const ::xml_schema::parser_map& m)
{
  this->m32_parser_map_ = &m;
}

void GPSCovariance_pskel::
m33_parser (::xml_schema::string_pskel& p)
{
  this->m33_parser_ = &p;
}

void GPSCovariance_pskel::
m33_parser (const ::xml_schema::parser_map& m)
{
  this->m33_parser_map_ = &m;
}

void GPSCovariance_pskel::
parsers (::xml_schema::string_pskel& m11,
         ::xml_schema::string_pskel& m12,
         ::xml_schema::string_pskel& m13,
         ::xml_schema::string_pskel& m21,
         ::xml_schema::string_pskel& m22,
         ::xml_schema::string_pskel& m23,
         ::xml_schema::string_pskel& m31,
         ::xml_schema::string_pskel& m32,
         ::xml_schema::string_pskel& m33)
{
  this->m11_parser_ = &m11;
  this->m12_parser_ = &m12;
  this->m13_parser_ = &m13;
  this->m21_parser_ = &m21;
  this->m22_parser_ = &m22;
  this->m23_parser_ = &m23;
  this->m31_parser_ = &m31;
  this->m32_parser_ = &m32;
  this->m33_parser_ = &m33;
}

GPSCovariance_pskel::
GPSCovariance_pskel ()
: m11_parser_ (0),
  m11_parser_map_ (0),
  m12_parser_ (0),
  m12_parser_map_ (0),
  m13_parser_ (0),
  m13_parser_map_ (0),
  m21_parser_ (0),
  m21_parser_map_ (0),
  m22_parser_ (0),
  m22_parser_map_ (0),
  m23_parser_ (0),
  m23_parser_map_ (0),
  m31_parser_ (0),
  m31_parser_map_ (0),
  m32_parser_ (0),
  m32_parser_map_ (0),
  m33_parser_ (0),
  m33_parser_map_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// PointCovariance_pskel
//

void PointCovariance_pskel::
m11_parser (::xml_schema::string_pskel& p)
{
  this->m11_parser_ = &p;
}

void PointCovariance_pskel::
m11_parser (const ::xml_schema::parser_map& m)
{
  this->m11_parser_map_ = &m;
}

void PointCovariance_pskel::
m12_parser (::xml_schema::string_pskel& p)
{
  this->m12_parser_ = &p;
}

void PointCovariance_pskel::
m12_parser (const ::xml_schema::parser_map& m)
{
  this->m12_parser_map_ = &m;
}

void PointCovariance_pskel::
m13_parser (::xml_schema::string_pskel& p)
{
  this->m13_parser_ = &p;
}

void PointCovariance_pskel::
m13_parser (const ::xml_schema::parser_map& m)
{
  this->m13_parser_map_ = &m;
}

void PointCovariance_pskel::
m21_parser (::xml_schema::string_pskel& p)
{
  this->m21_parser_ = &p;
}

void PointCovariance_pskel::
m21_parser (const ::xml_schema::parser_map& m)
{
  this->m21_parser_map_ = &m;
}

void PointCovariance_pskel::
m22_parser (::xml_schema::string_pskel& p)
{
  this->m22_parser_ = &p;
}

void PointCovariance_pskel::
m22_parser (const ::xml_schema::parser_map& m)
{
  this->m22_parser_map_ = &m;
}

void PointCovariance_pskel::
m23_parser (::xml_schema::string_pskel& p)
{
  this->m23_parser_ = &p;
}

void PointCovariance_pskel::
m23_parser (const ::xml_schema::parser_map& m)
{
  this->m23_parser_map_ = &m;
}

void PointCovariance_pskel::
m31_parser (::xml_schema::string_pskel& p)
{
  this->m31_parser_ = &p;
}

void PointCovariance_pskel::
m31_parser (const ::xml_schema::parser_map& m)
{
  this->m31_parser_map_ = &m;
}

void PointCovariance_pskel::
m32_parser (::xml_schema::string_pskel& p)
{
  this->m32_parser_ = &p;
}

void PointCovariance_pskel::
m32_parser (const ::xml_schema::parser_map& m)
{
  this->m32_parser_map_ = &m;
}

void PointCovariance_pskel::
m33_parser (::xml_schema::string_pskel& p)
{
  this->m33_parser_ = &p;
}

void PointCovariance_pskel::
m33_parser (const ::xml_schema::parser_map& m)
{
  this->m33_parser_map_ = &m;
}

void PointCovariance_pskel::
parsers (::xml_schema::string_pskel& m11,
         ::xml_schema::string_pskel& m12,
         ::xml_schema::string_pskel& m13,
         ::xml_schema::string_pskel& m21,
         ::xml_schema::string_pskel& m22,
         ::xml_schema::string_pskel& m23,
         ::xml_schema::string_pskel& m31,
         ::xml_schema::string_pskel& m32,
         ::xml_schema::string_pskel& m33)
{
  this->m11_parser_ = &m11;
  this->m12_parser_ = &m12;
  this->m13_parser_ = &m13;
  this->m21_parser_ = &m21;
  this->m22_parser_ = &m22;
  this->m23_parser_ = &m23;
  this->m31_parser_ = &m31;
  this->m32_parser_ = &m32;
  this->m33_parser_ = &m33;
}

PointCovariance_pskel::
PointCovariance_pskel ()
: m11_parser_ (0),
  m11_parser_map_ (0),
  m12_parser_ (0),
  m12_parser_map_ (0),
  m13_parser_ (0),
  m13_parser_map_ (0),
  m21_parser_ (0),
  m21_parser_map_ (0),
  m22_parser_ (0),
  m22_parser_map_ (0),
  m23_parser_ (0),
  m23_parser_map_ (0),
  m31_parser_ (0),
  m31_parser_map_ (0),
  m32_parser_ (0),
  m32_parser_map_ (0),
  m33_parser_ (0),
  m33_parser_map_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// StationCoord_pskel
//

void StationCoord_pskel::
Name_parser (::xml_schema::string_pskel& p)
{
  this->Name_parser_ = &p;
}

void StationCoord_pskel::
Name_parser (const ::xml_schema::parser_map& m)
{
  this->Name_parser_map_ = &m;
}

void StationCoord_pskel::
XAxis_parser (::xml_schema::string_pskel& p)
{
  this->XAxis_parser_ = &p;
}

void StationCoord_pskel::
XAxis_parser (const ::xml_schema::parser_map& m)
{
  this->XAxis_parser_map_ = &m;
}

void StationCoord_pskel::
YAxis_parser (::xml_schema::string_pskel& p)
{
  this->YAxis_parser_ = &p;
}

void StationCoord_pskel::
YAxis_parser (const ::xml_schema::parser_map& m)
{
  this->YAxis_parser_map_ = &m;
}

void StationCoord_pskel::
Height_parser (::xml_schema::string_pskel& p)
{
  this->Height_parser_ = &p;
}

void StationCoord_pskel::
Height_parser (const ::xml_schema::parser_map& m)
{
  this->Height_parser_map_ = &m;
}

void StationCoord_pskel::
HemisphereZone_parser (::xml_schema::string_pskel& p)
{
  this->HemisphereZone_parser_ = &p;
}

void StationCoord_pskel::
HemisphereZone_parser (const ::xml_schema::parser_map& m)
{
  this->HemisphereZone_parser_map_ = &m;
}

void StationCoord_pskel::
parsers (::xml_schema::string_pskel& Name,
         ::xml_schema::string_pskel& XAxis,
         ::xml_schema::string_pskel& YAxis,
         ::xml_schema::string_pskel& Height,
         ::xml_schema::string_pskel& HemisphereZone)
{
  this->Name_parser_ = &Name;
  this->XAxis_parser_ = &XAxis;
  this->YAxis_parser_ = &YAxis;
  this->Height_parser_ = &Height;
  this->HemisphereZone_parser_ = &HemisphereZone;
}

StationCoord_pskel::
StationCoord_pskel ()
: Name_parser_ (0),
  Name_parser_map_ (0),
  XAxis_parser_ (0),
  XAxis_parser_map_ (0),
  YAxis_parser_ (0),
  YAxis_parser_map_ (0),
  Height_parser_ (0),
  Height_parser_map_ (0),
  HemisphereZone_parser_ (0),
  HemisphereZone_parser_map_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

#include <xsd/cxx/parser/substitution-map.hxx>
#include <xsd/cxx/parser/validating/inheritance-map.hxx>

static
const ::xsd::cxx::parser::substitution_map_init< char >
_xsd_substitution_map_init_;

static
const ::xsd::cxx::parser::validating::inheritance_map_init< char >
_xsd_inheritance_map_init_;

// Clusterpoint_pskel
//

const char* Clusterpoint_pskel::
_static_type ()
{
  return "Clusterpoint";
}

const char* Clusterpoint_pskel::
_dynamic_type () const
{
  return _static_type ();
}

void Clusterpoint_pskel::
X (const ::std::string&)
{
}

void Clusterpoint_pskel::
Y (const ::std::string&)
{
}

void Clusterpoint_pskel::
Z (const ::std::string&)
{
}

void Clusterpoint_pskel::
SigmaXX (const ::std::string&)
{
}

void Clusterpoint_pskel::
SigmaXY (const ::std::string&)
{
}

void Clusterpoint_pskel::
SigmaXZ (const ::std::string&)
{
}

void Clusterpoint_pskel::
SigmaYY (const ::std::string&)
{
}

void Clusterpoint_pskel::
SigmaYZ (const ::std::string&)
{
}

void Clusterpoint_pskel::
SigmaZZ (const ::std::string&)
{
}

void Clusterpoint_pskel::
PointCovariance (const ::arma::mat33&)
{
}

// Directions_pskel
//

const char* Directions_pskel::
_static_type ()
{
  return "Directions";
}

const char* Directions_pskel::
_dynamic_type () const
{
  return _static_type ();
}

void Directions_pskel::
Ignore (const ::std::string&)
{
}

void Directions_pskel::
Target (const ::std::string&)
{
}

void Directions_pskel::
Value (const ::std::string&)
{
}

void Directions_pskel::
StdDev (const ::std::string&)
{
}

// DnaMeasurement_pskel
//

const char* DnaMeasurement_pskel::
_static_type ()
{
  return "DnaMeasurement";
}

const char* DnaMeasurement_pskel::
_dynamic_type () const
{
  return _static_type ();
}

void DnaMeasurement_pskel::
Type (const ::std::string&)
{
}

void DnaMeasurement_pskel::
Ignore (const ::std::string&)
{
}

void DnaMeasurement_pskel::
First (const ::std::string&)
{
}

void DnaMeasurement_pskel::
Second (const ::std::string&)
{
}

void DnaMeasurement_pskel::
Third (const ::std::string&)
{
}

void DnaMeasurement_pskel::
Value (const ::std::string&)
{
}

void DnaMeasurement_pskel::
StdDev (const ::std::string&)
{
}

void DnaMeasurement_pskel::
InstHeight (const ::std::string&)
{
}

void DnaMeasurement_pskel::
TargHeight (const ::std::string&)
{
}

void DnaMeasurement_pskel::
Total (const ::std::string&)
{
}

void DnaMeasurement_pskel::
Directions (::Directions_Struct&)
{
}

void DnaMeasurement_pskel::
Vscale (const ::std::string&)
{
}

void DnaMeasurement_pskel::
GPSBaseline (::GPSBaseline_Struct&)
{
}

void DnaMeasurement_pskel::
Hscale (const ::std::string&)
{
}

void DnaMeasurement_pskel::
Lscale (const ::std::string&)
{
}

void DnaMeasurement_pskel::
Pscale (const ::std::string&)
{
}

void DnaMeasurement_pskel::
Clusterpoint (::ClusterPoint_Struct&)
{
}

void DnaMeasurement_pskel::
Coords (const ::std::string&)
{
}

void DnaMeasurement_pskel::
Source (const ::std::string&)
{
}

void DnaMeasurement_pskel::
ReferenceFrame (const ::std::string&)
{
}

void DnaMeasurement_pskel::
MeasuredDate (const ::std::string&)
{
}

// DnaStation_pskel
//

const char* DnaStation_pskel::
_static_type ()
{
  return "DnaStation";
}

const char* DnaStation_pskel::
_dynamic_type () const
{
  return _static_type ();
}

void DnaStation_pskel::
Name (const ::std::string&)
{
}

void DnaStation_pskel::
Constraints (const ::std::string&)
{
}

void DnaStation_pskel::
Type (const ::std::string&)
{
}

void DnaStation_pskel::
StationCoord (const ::StationCoord_Struct&)
{
}

void DnaStation_pskel::
Description (const ::std::string&)
{
}

// DnaXmlFormat_pskel
//

const char* DnaXmlFormat_pskel::
_static_type ()
{
  return "DnaXmlFormat";
}

const char* DnaXmlFormat_pskel::
_dynamic_type () const
{
  return _static_type ();
}

void DnaXmlFormat_pskel::
DnaStation (::Station&)
{
}

void DnaXmlFormat_pskel::
DnaMeasurement (::DnaMeasurement*)
{
}

void DnaXmlFormat_pskel::
type ()
{
}

void DnaXmlFormat_pskel::
post_DnaXmlFormat ()
{
}

// GPSBaseline_pskel
//

const char* GPSBaseline_pskel::
_static_type ()
{
  return "GPSBaseline";
}

const char* GPSBaseline_pskel::
_dynamic_type () const
{
  return _static_type ();
}

void GPSBaseline_pskel::
X (const ::std::string&)
{
}

void GPSBaseline_pskel::
Y (const ::std::string&)
{
}

void GPSBaseline_pskel::
Z (const ::std::string&)
{
}

void GPSBaseline_pskel::
SigmaXX (const ::std::string&)
{
}

void GPSBaseline_pskel::
SigmaXY (const ::std::string&)
{
}

void GPSBaseline_pskel::
SigmaXZ (const ::std::string&)
{
}

void GPSBaseline_pskel::
SigmaYY (const ::std::string&)
{
}

void GPSBaseline_pskel::
SigmaYZ (const ::std::string&)
{
}

void GPSBaseline_pskel::
SigmaZZ (const ::std::string&)
{
}

void GPSBaseline_pskel::
GPSCovariance (const ::arma::mat33&)
{
}

// GPSCovariance_pskel
//

const char* GPSCovariance_pskel::
_static_type ()
{
  return "GPSCovariance";
}

const char* GPSCovariance_pskel::
_dynamic_type () const
{
  return _static_type ();
}

void GPSCovariance_pskel::
m11 (const ::std::string&)
{
}

void GPSCovariance_pskel::
m12 (const ::std::string&)
{
}

void GPSCovariance_pskel::
m13 (const ::std::string&)
{
}

void GPSCovariance_pskel::
m21 (const ::std::string&)
{
}

void GPSCovariance_pskel::
m22 (const ::std::string&)
{
}

void GPSCovariance_pskel::
m23 (const ::std::string&)
{
}

void GPSCovariance_pskel::
m31 (const ::std::string&)
{
}

void GPSCovariance_pskel::
m32 (const ::std::string&)
{
}

void GPSCovariance_pskel::
m33 (const ::std::string&)
{
}

// PointCovariance_pskel
//

const char* PointCovariance_pskel::
_static_type ()
{
  return "PointCovariance";
}

const char* PointCovariance_pskel::
_dynamic_type () const
{
  return _static_type ();
}

void PointCovariance_pskel::
m11 (const ::std::string&)
{
}

void PointCovariance_pskel::
m12 (const ::std::string&)
{
}

void PointCovariance_pskel::
m13 (const ::std::string&)
{
}

void PointCovariance_pskel::
m21 (const ::std::string&)
{
}

void PointCovariance_pskel::
m22 (const ::std::string&)
{
}

void PointCovariance_pskel::
m23 (const ::std::string&)
{
}

void PointCovariance_pskel::
m31 (const ::std::string&)
{
}

void PointCovariance_pskel::
m32 (const ::std::string&)
{
}

void PointCovariance_pskel::
m33 (const ::std::string&)
{
}

// StationCoord_pskel
//

const char* StationCoord_pskel::
_static_type ()
{
  return "StationCoord";
}

const char* StationCoord_pskel::
_dynamic_type () const
{
  return _static_type ();
}

void StationCoord_pskel::
Name (const ::std::string&)
{
}

void StationCoord_pskel::
XAxis (const ::std::string&)
{
}

void StationCoord_pskel::
YAxis (const ::std::string&)
{
}

void StationCoord_pskel::
Height (const ::std::string&)
{
}

void StationCoord_pskel::
HemisphereZone (const ::std::string&)
{
}

// type_pskel
//

void type_pskel::
post_type ()
{
}

const char* type_pskel::
_static_type ()
{
  return "type";
}

const char* type_pskel::
_dynamic_type () const
{
  return _static_type ();
}

#include <cassert>

// Element validation and dispatch functions for Clusterpoint_pskel.
//
bool Clusterpoint_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if ((n == "X" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "X", t))
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &Clusterpoint_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "X",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool Clusterpoint_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void Clusterpoint_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void Clusterpoint_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "X");

  this->v_state_stack_.pop ();
}

void Clusterpoint_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if ((n == "X" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "X", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->X_parser_ != 0)
            p = this->X_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->X_parser_ != 0 && *t == ts)
              p = this->X_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->X_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->X_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->X (tmp);
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "X",
            ns, n);
        count = 0;
        state = 1UL;
        // Fall through.
      }
    }
    case 1UL:
    {
      if ((n == "Y" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "Y", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->Y_parser_ != 0)
            p = this->Y_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->Y_parser_ != 0 && *t == ts)
              p = this->Y_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->Y_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->Y_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->Y (tmp);
          }

          count = 0;
          state = 2UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "Y",
            ns, n);
        count = 0;
        state = 2UL;
        // Fall through.
      }
    }
    case 2UL:
    {
      if ((n == "Z" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "Z", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->Z_parser_ != 0)
            p = this->Z_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->Z_parser_ != 0 && *t == ts)
              p = this->Z_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->Z_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->Z_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->Z (tmp);
          }

          count = 0;
          state = 3UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "Z",
            ns, n);
        count = 0;
        state = 3UL;
        // Fall through.
      }
    }
    case 3UL:
    {
      if ((n == "SigmaXX" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "SigmaXX", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->SigmaXX_parser_ != 0)
            p = this->SigmaXX_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->SigmaXX_parser_ != 0 && *t == ts)
              p = this->SigmaXX_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->SigmaXX_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->SigmaXX_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->SigmaXX (tmp);
          }

          count = 0;
          state = 4UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "SigmaXX",
            ns, n);
        count = 0;
        state = 4UL;
        // Fall through.
      }
    }
    case 4UL:
    {
      if ((n == "SigmaXY" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "SigmaXY", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->SigmaXY_parser_ != 0)
            p = this->SigmaXY_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->SigmaXY_parser_ != 0 && *t == ts)
              p = this->SigmaXY_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->SigmaXY_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->SigmaXY_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->SigmaXY (tmp);
          }

          count = 0;
          state = 5UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "SigmaXY",
            ns, n);
        count = 0;
        state = 5UL;
        // Fall through.
      }
    }
    case 5UL:
    {
      if ((n == "SigmaXZ" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "SigmaXZ", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->SigmaXZ_parser_ != 0)
            p = this->SigmaXZ_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->SigmaXZ_parser_ != 0 && *t == ts)
              p = this->SigmaXZ_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->SigmaXZ_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->SigmaXZ_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->SigmaXZ (tmp);
          }

          count = 0;
          state = 6UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "SigmaXZ",
            ns, n);
        count = 0;
        state = 6UL;
        // Fall through.
      }
    }
    case 6UL:
    {
      if ((n == "SigmaYY" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "SigmaYY", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->SigmaYY_parser_ != 0)
            p = this->SigmaYY_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->SigmaYY_parser_ != 0 && *t == ts)
              p = this->SigmaYY_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->SigmaYY_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->SigmaYY_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->SigmaYY (tmp);
          }

          count = 0;
          state = 7UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "SigmaYY",
            ns, n);
        count = 0;
        state = 7UL;
        // Fall through.
      }
    }
    case 7UL:
    {
      if ((n == "SigmaYZ" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "SigmaYZ", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->SigmaYZ_parser_ != 0)
            p = this->SigmaYZ_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->SigmaYZ_parser_ != 0 && *t == ts)
              p = this->SigmaYZ_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->SigmaYZ_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->SigmaYZ_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->SigmaYZ (tmp);
          }

          count = 0;
          state = 8UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "SigmaYZ",
            ns, n);
        count = 0;
        state = 8UL;
        // Fall through.
      }
    }
    case 8UL:
    {
      if ((n == "SigmaZZ" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "SigmaZZ", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->SigmaZZ_parser_ != 0)
            p = this->SigmaZZ_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->SigmaZZ_parser_ != 0 && *t == ts)
              p = this->SigmaZZ_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->SigmaZZ_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->SigmaZZ_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->SigmaZZ (tmp);
          }

          count = 0;
          state = 9UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "SigmaZZ",
            ns, n);
        count = 0;
        state = 9UL;
        // Fall through.
      }
    }
    case 9UL:
    {
      if ((n == "PointCovariance" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "PointCovariance", t))
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->PointCovariance_parser_;

          if (this->PointCovariance_parser_)
            this->PointCovariance_parser_->pre ();
        }
        else
        {
          if (this->PointCovariance_parser_)
          {
            const ::arma::mat33& tmp (this->PointCovariance_parser_->post_PointCovariance ());
            this->PointCovariance (tmp);
          }

          count++;
        }

        break;
      }
      else
      {
        assert (start);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for Directions_pskel.
//
bool Directions_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if ((n == "Ignore" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "Ignore", t))
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &Directions_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "Ignore",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool Directions_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void Directions_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void Directions_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "Ignore");

  this->v_state_stack_.pop ();
}

void Directions_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if ((n == "Ignore" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "Ignore", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->Ignore_parser_ != 0)
            p = this->Ignore_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->Ignore_parser_ != 0 && *t == ts)
              p = this->Ignore_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->Ignore_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->Ignore_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->Ignore (tmp);
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "Ignore",
            ns, n);
        count = 0;
        state = 1UL;
        // Fall through.
      }
    }
    case 1UL:
    {
      if ((n == "Target" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "Target", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->Target_parser_ != 0)
            p = this->Target_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->Target_parser_ != 0 && *t == ts)
              p = this->Target_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->Target_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->Target_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->Target (tmp);
          }

          count = 0;
          state = 2UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "Target",
            ns, n);
        count = 0;
        state = 2UL;
        // Fall through.
      }
    }
    case 2UL:
    {
      if ((n == "Value" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "Value", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->Value_parser_ != 0)
            p = this->Value_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->Value_parser_ != 0 && *t == ts)
              p = this->Value_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->Value_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->Value_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->Value (tmp);
          }

          count = 0;
          state = 3UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "Value",
            ns, n);
        count = 0;
        state = 3UL;
        // Fall through.
      }
    }
    case 3UL:
    {
      if ((n == "StdDev" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "StdDev", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->StdDev_parser_ != 0)
            p = this->StdDev_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->StdDev_parser_ != 0 && *t == ts)
              p = this->StdDev_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->StdDev_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->StdDev_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->StdDev (tmp);
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "StdDev",
            ns, n);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for DnaMeasurement_pskel.
//
bool DnaMeasurement_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if ((n == "Type" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "Type", t))
        s = 0UL;
      else if ((n == "Ignore" && ns.empty ()) ||
               ::xsd::cxx::parser::substitution_map_instance< char > ().check (
                 ns, n, "", "Ignore", t))
        s = 1UL;
      else if ((n == "First" && ns.empty ()) ||
               ::xsd::cxx::parser::substitution_map_instance< char > ().check (
                 ns, n, "", "First", t))
        s = 2UL;
      else if ((n == "Second" && ns.empty ()) ||
               ::xsd::cxx::parser::substitution_map_instance< char > ().check (
                 ns, n, "", "Second", t))
        s = 3UL;
      else if ((n == "Third" && ns.empty ()) ||
               ::xsd::cxx::parser::substitution_map_instance< char > ().check (
                 ns, n, "", "Third", t))
        s = 4UL;
      else if ((n == "Value" && ns.empty ()) ||
               ::xsd::cxx::parser::substitution_map_instance< char > ().check (
                 ns, n, "", "Value", t))
        s = 5UL;
      else if ((n == "StdDev" && ns.empty ()) ||
               ::xsd::cxx::parser::substitution_map_instance< char > ().check (
                 ns, n, "", "StdDev", t))
        s = 6UL;
      else if ((n == "InstHeight" && ns.empty ()) ||
               ::xsd::cxx::parser::substitution_map_instance< char > ().check (
                 ns, n, "", "InstHeight", t))
        s = 7UL;
      else if ((n == "TargHeight" && ns.empty ()) ||
               ::xsd::cxx::parser::substitution_map_instance< char > ().check (
                 ns, n, "", "TargHeight", t))
        s = 8UL;
      else if ((n == "Total" && ns.empty ()) ||
               ::xsd::cxx::parser::substitution_map_instance< char > ().check (
                 ns, n, "", "Total", t))
        s = 9UL;
      else if ((n == "Directions" && ns.empty ()) ||
               ::xsd::cxx::parser::substitution_map_instance< char > ().check (
                 ns, n, "", "Directions", t))
        s = 10UL;
      else if ((n == "Vscale" && ns.empty ()) ||
               ::xsd::cxx::parser::substitution_map_instance< char > ().check (
                 ns, n, "", "Vscale", t))
        s = 11UL;
      else if ((n == "GPSBaseline" && ns.empty ()) ||
               ::xsd::cxx::parser::substitution_map_instance< char > ().check (
                 ns, n, "", "GPSBaseline", t))
        s = 12UL;
      else if ((n == "Hscale" && ns.empty ()) ||
               ::xsd::cxx::parser::substitution_map_instance< char > ().check (
                 ns, n, "", "Hscale", t))
        s = 13UL;
      else if ((n == "Lscale" && ns.empty ()) ||
               ::xsd::cxx::parser::substitution_map_instance< char > ().check (
                 ns, n, "", "Lscale", t))
        s = 14UL;
      else if ((n == "Pscale" && ns.empty ()) ||
               ::xsd::cxx::parser::substitution_map_instance< char > ().check (
                 ns, n, "", "Pscale", t))
        s = 15UL;
      else if ((n == "Clusterpoint" && ns.empty ()) ||
               ::xsd::cxx::parser::substitution_map_instance< char > ().check (
                 ns, n, "", "Clusterpoint", t))
        s = 16UL;
      else if ((n == "Coords" && ns.empty ()) ||
               ::xsd::cxx::parser::substitution_map_instance< char > ().check (
                 ns, n, "", "Coords", t))
        s = 17UL;
      else if ((n == "Source" && ns.empty ()) ||
               ::xsd::cxx::parser::substitution_map_instance< char > ().check (
                 ns, n, "", "Source", t))
        s = 18UL;
      else if ((n == "ReferenceFrame" && ns.empty ()) ||
               ::xsd::cxx::parser::substitution_map_instance< char > ().check (
                 ns, n, "", "ReferenceFrame", t))
        s = 19UL;
      else if ((n == "MeasuredDate" && ns.empty ()) ||
               ::xsd::cxx::parser::substitution_map_instance< char > ().check (
                 ns, n, "", "MeasuredDate", t))
        s = 20UL;

      if (s != ~0UL)
      {
        vd->count++;

        vd = vs.data + vs.size++;
        vd->func = &DnaMeasurement_pskel::choice_0;
        vd->state = s;
        vd->count = 0;

        this->choice_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "Type",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool DnaMeasurement_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void DnaMeasurement_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void DnaMeasurement_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "Type");

  this->v_state_stack_.pop ();
}

void DnaMeasurement_pskel::
choice_0 (unsigned long& state,
          unsigned long& count,
          const ::xml_schema::ro_string& ns,
          const ::xml_schema::ro_string& n,
          const ::xml_schema::ro_string* t,
          bool start)
{
  XSD_UNUSED (count);
  XSD_UNUSED (ns);
  XSD_UNUSED (n);
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (start)
      {
        ::xml_schema::string_pskel* p = 0;

        if (t == 0 && this->Type_parser_ != 0)
          p = this->Type_parser_;
        else
        {
          ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

          if (t == 0)
            t = &ts;

          if (this->Type_parser_ != 0 && *t == ts)
            p = this->Type_parser_;
          else
          {
            if (t != &ts &&
                !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                  t->data (), ts))
              throw ::xsd::cxx::parser::dynamic_type< char > (*t);

            if (this->Type_parser_map_ != 0)
              p = dynamic_cast< ::xml_schema::string_pskel* > (
                this->Type_parser_map_->find (*t));
          }
        }

        this->::xml_schema::complex_content::context_.top ().parser_ = p;

        if (p)
          p->pre ();
      }
      else
      {
        ::xml_schema::string_pskel* p =
        dynamic_cast< ::xml_schema::string_pskel* > (
          this->::xml_schema::complex_content::context_.top ().parser_);

        if (p)
        {
          const ::std::string& tmp (p->post_string ());
          this->Type (tmp);
        }

        state = ~0UL;
      }

      break;
    }
    case 1UL:
    {
      if (start)
      {
        ::xml_schema::string_pskel* p = 0;

        if (t == 0 && this->Ignore_parser_ != 0)
          p = this->Ignore_parser_;
        else
        {
          ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

          if (t == 0)
            t = &ts;

          if (this->Ignore_parser_ != 0 && *t == ts)
            p = this->Ignore_parser_;
          else
          {
            if (t != &ts &&
                !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                  t->data (), ts))
              throw ::xsd::cxx::parser::dynamic_type< char > (*t);

            if (this->Ignore_parser_map_ != 0)
              p = dynamic_cast< ::xml_schema::string_pskel* > (
                this->Ignore_parser_map_->find (*t));
          }
        }

        this->::xml_schema::complex_content::context_.top ().parser_ = p;

        if (p)
          p->pre ();
      }
      else
      {
        ::xml_schema::string_pskel* p =
        dynamic_cast< ::xml_schema::string_pskel* > (
          this->::xml_schema::complex_content::context_.top ().parser_);

        if (p)
        {
          const ::std::string& tmp (p->post_string ());
          this->Ignore (tmp);
        }

        state = ~0UL;
      }

      break;
    }
    case 2UL:
    {
      if (start)
      {
        ::xml_schema::string_pskel* p = 0;

        if (t == 0 && this->First_parser_ != 0)
          p = this->First_parser_;
        else
        {
          ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

          if (t == 0)
            t = &ts;

          if (this->First_parser_ != 0 && *t == ts)
            p = this->First_parser_;
          else
          {
            if (t != &ts &&
                !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                  t->data (), ts))
              throw ::xsd::cxx::parser::dynamic_type< char > (*t);

            if (this->First_parser_map_ != 0)
              p = dynamic_cast< ::xml_schema::string_pskel* > (
                this->First_parser_map_->find (*t));
          }
        }

        this->::xml_schema::complex_content::context_.top ().parser_ = p;

        if (p)
          p->pre ();
      }
      else
      {
        ::xml_schema::string_pskel* p =
        dynamic_cast< ::xml_schema::string_pskel* > (
          this->::xml_schema::complex_content::context_.top ().parser_);

        if (p)
        {
          const ::std::string& tmp (p->post_string ());
          this->First (tmp);
        }

        state = ~0UL;
      }

      break;
    }
    case 3UL:
    {
      if (start)
      {
        ::xml_schema::string_pskel* p = 0;

        if (t == 0 && this->Second_parser_ != 0)
          p = this->Second_parser_;
        else
        {
          ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

          if (t == 0)
            t = &ts;

          if (this->Second_parser_ != 0 && *t == ts)
            p = this->Second_parser_;
          else
          {
            if (t != &ts &&
                !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                  t->data (), ts))
              throw ::xsd::cxx::parser::dynamic_type< char > (*t);

            if (this->Second_parser_map_ != 0)
              p = dynamic_cast< ::xml_schema::string_pskel* > (
                this->Second_parser_map_->find (*t));
          }
        }

        this->::xml_schema::complex_content::context_.top ().parser_ = p;

        if (p)
          p->pre ();
      }
      else
      {
        ::xml_schema::string_pskel* p =
        dynamic_cast< ::xml_schema::string_pskel* > (
          this->::xml_schema::complex_content::context_.top ().parser_);

        if (p)
        {
          const ::std::string& tmp (p->post_string ());
          this->Second (tmp);
        }

        state = ~0UL;
      }

      break;
    }
    case 4UL:
    {
      if (start)
      {
        ::xml_schema::string_pskel* p = 0;

        if (t == 0 && this->Third_parser_ != 0)
          p = this->Third_parser_;
        else
        {
          ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

          if (t == 0)
            t = &ts;

          if (this->Third_parser_ != 0 && *t == ts)
            p = this->Third_parser_;
          else
          {
            if (t != &ts &&
                !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                  t->data (), ts))
              throw ::xsd::cxx::parser::dynamic_type< char > (*t);

            if (this->Third_parser_map_ != 0)
              p = dynamic_cast< ::xml_schema::string_pskel* > (
                this->Third_parser_map_->find (*t));
          }
        }

        this->::xml_schema::complex_content::context_.top ().parser_ = p;

        if (p)
          p->pre ();
      }
      else
      {
        ::xml_schema::string_pskel* p =
        dynamic_cast< ::xml_schema::string_pskel* > (
          this->::xml_schema::complex_content::context_.top ().parser_);

        if (p)
        {
          const ::std::string& tmp (p->post_string ());
          this->Third (tmp);
        }

        state = ~0UL;
      }

      break;
    }
    case 5UL:
    {
      if (start)
      {
        ::xml_schema::string_pskel* p = 0;

        if (t == 0 && this->Value_parser_ != 0)
          p = this->Value_parser_;
        else
        {
          ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

          if (t == 0)
            t = &ts;

          if (this->Value_parser_ != 0 && *t == ts)
            p = this->Value_parser_;
          else
          {
            if (t != &ts &&
                !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                  t->data (), ts))
              throw ::xsd::cxx::parser::dynamic_type< char > (*t);

            if (this->Value_parser_map_ != 0)
              p = dynamic_cast< ::xml_schema::string_pskel* > (
                this->Value_parser_map_->find (*t));
          }
        }

        this->::xml_schema::complex_content::context_.top ().parser_ = p;

        if (p)
          p->pre ();
      }
      else
      {
        ::xml_schema::string_pskel* p =
        dynamic_cast< ::xml_schema::string_pskel* > (
          this->::xml_schema::complex_content::context_.top ().parser_);

        if (p)
        {
          const ::std::string& tmp (p->post_string ());
          this->Value (tmp);
        }

        state = ~0UL;
      }

      break;
    }
    case 6UL:
    {
      if (start)
      {
        ::xml_schema::string_pskel* p = 0;

        if (t == 0 && this->StdDev_parser_ != 0)
          p = this->StdDev_parser_;
        else
        {
          ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

          if (t == 0)
            t = &ts;

          if (this->StdDev_parser_ != 0 && *t == ts)
            p = this->StdDev_parser_;
          else
          {
            if (t != &ts &&
                !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                  t->data (), ts))
              throw ::xsd::cxx::parser::dynamic_type< char > (*t);

            if (this->StdDev_parser_map_ != 0)
              p = dynamic_cast< ::xml_schema::string_pskel* > (
                this->StdDev_parser_map_->find (*t));
          }
        }

        this->::xml_schema::complex_content::context_.top ().parser_ = p;

        if (p)
          p->pre ();
      }
      else
      {
        ::xml_schema::string_pskel* p =
        dynamic_cast< ::xml_schema::string_pskel* > (
          this->::xml_schema::complex_content::context_.top ().parser_);

        if (p)
        {
          const ::std::string& tmp (p->post_string ());
          this->StdDev (tmp);
        }

        state = ~0UL;
      }

      break;
    }
    case 7UL:
    {
      if (start)
      {
        ::xml_schema::string_pskel* p = 0;

        if (t == 0 && this->InstHeight_parser_ != 0)
          p = this->InstHeight_parser_;
        else
        {
          ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

          if (t == 0)
            t = &ts;

          if (this->InstHeight_parser_ != 0 && *t == ts)
            p = this->InstHeight_parser_;
          else
          {
            if (t != &ts &&
                !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                  t->data (), ts))
              throw ::xsd::cxx::parser::dynamic_type< char > (*t);

            if (this->InstHeight_parser_map_ != 0)
              p = dynamic_cast< ::xml_schema::string_pskel* > (
                this->InstHeight_parser_map_->find (*t));
          }
        }

        this->::xml_schema::complex_content::context_.top ().parser_ = p;

        if (p)
          p->pre ();
      }
      else
      {
        ::xml_schema::string_pskel* p =
        dynamic_cast< ::xml_schema::string_pskel* > (
          this->::xml_schema::complex_content::context_.top ().parser_);

        if (p)
        {
          const ::std::string& tmp (p->post_string ());
          this->InstHeight (tmp);
        }

        state = ~0UL;
      }

      break;
    }
    case 8UL:
    {
      if (start)
      {
        ::xml_schema::string_pskel* p = 0;

        if (t == 0 && this->TargHeight_parser_ != 0)
          p = this->TargHeight_parser_;
        else
        {
          ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

          if (t == 0)
            t = &ts;

          if (this->TargHeight_parser_ != 0 && *t == ts)
            p = this->TargHeight_parser_;
          else
          {
            if (t != &ts &&
                !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                  t->data (), ts))
              throw ::xsd::cxx::parser::dynamic_type< char > (*t);

            if (this->TargHeight_parser_map_ != 0)
              p = dynamic_cast< ::xml_schema::string_pskel* > (
                this->TargHeight_parser_map_->find (*t));
          }
        }

        this->::xml_schema::complex_content::context_.top ().parser_ = p;

        if (p)
          p->pre ();
      }
      else
      {
        ::xml_schema::string_pskel* p =
        dynamic_cast< ::xml_schema::string_pskel* > (
          this->::xml_schema::complex_content::context_.top ().parser_);

        if (p)
        {
          const ::std::string& tmp (p->post_string ());
          this->TargHeight (tmp);
        }

        state = ~0UL;
      }

      break;
    }
    case 9UL:
    {
      if (start)
      {
        ::xml_schema::string_pskel* p = 0;

        if (t == 0 && this->Total_parser_ != 0)
          p = this->Total_parser_;
        else
        {
          ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

          if (t == 0)
            t = &ts;

          if (this->Total_parser_ != 0 && *t == ts)
            p = this->Total_parser_;
          else
          {
            if (t != &ts &&
                !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                  t->data (), ts))
              throw ::xsd::cxx::parser::dynamic_type< char > (*t);

            if (this->Total_parser_map_ != 0)
              p = dynamic_cast< ::xml_schema::string_pskel* > (
                this->Total_parser_map_->find (*t));
          }
        }

        this->::xml_schema::complex_content::context_.top ().parser_ = p;

        if (p)
          p->pre ();
      }
      else
      {
        ::xml_schema::string_pskel* p =
        dynamic_cast< ::xml_schema::string_pskel* > (
          this->::xml_schema::complex_content::context_.top ().parser_);

        if (p)
        {
          const ::std::string& tmp (p->post_string ());
          this->Total (tmp);
        }

        state = ~0UL;
      }

      break;
    }
    case 10UL:
    {
      if (start)
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->Directions_parser_;

        if (this->Directions_parser_)
          this->Directions_parser_->pre ();
      }
      else
      {
        if (this->Directions_parser_)
        {
          ::Directions_Struct& tmp (this->Directions_parser_->post_Directions ());
          this->Directions (tmp);
        }

        state = ~0UL;
      }

      break;
    }
    case 11UL:
    {
      if (start)
      {
        ::xml_schema::string_pskel* p = 0;

        if (t == 0 && this->Vscale_parser_ != 0)
          p = this->Vscale_parser_;
        else
        {
          ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

          if (t == 0)
            t = &ts;

          if (this->Vscale_parser_ != 0 && *t == ts)
            p = this->Vscale_parser_;
          else
          {
            if (t != &ts &&
                !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                  t->data (), ts))
              throw ::xsd::cxx::parser::dynamic_type< char > (*t);

            if (this->Vscale_parser_map_ != 0)
              p = dynamic_cast< ::xml_schema::string_pskel* > (
                this->Vscale_parser_map_->find (*t));
          }
        }

        this->::xml_schema::complex_content::context_.top ().parser_ = p;

        if (p)
          p->pre ();
      }
      else
      {
        ::xml_schema::string_pskel* p =
        dynamic_cast< ::xml_schema::string_pskel* > (
          this->::xml_schema::complex_content::context_.top ().parser_);

        if (p)
        {
          const ::std::string& tmp (p->post_string ());
          this->Vscale (tmp);
        }

        state = ~0UL;
      }

      break;
    }
    case 12UL:
    {
      if (start)
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->GPSBaseline_parser_;

        if (this->GPSBaseline_parser_)
          this->GPSBaseline_parser_->pre ();
      }
      else
      {
        if (this->GPSBaseline_parser_)
        {
          ::GPSBaseline_Struct& tmp (this->GPSBaseline_parser_->post_GPSBaseline ());
          this->GPSBaseline (tmp);
        }

        state = ~0UL;
      }

      break;
    }
    case 13UL:
    {
      if (start)
      {
        ::xml_schema::string_pskel* p = 0;

        if (t == 0 && this->Hscale_parser_ != 0)
          p = this->Hscale_parser_;
        else
        {
          ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

          if (t == 0)
            t = &ts;

          if (this->Hscale_parser_ != 0 && *t == ts)
            p = this->Hscale_parser_;
          else
          {
            if (t != &ts &&
                !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                  t->data (), ts))
              throw ::xsd::cxx::parser::dynamic_type< char > (*t);

            if (this->Hscale_parser_map_ != 0)
              p = dynamic_cast< ::xml_schema::string_pskel* > (
                this->Hscale_parser_map_->find (*t));
          }
        }

        this->::xml_schema::complex_content::context_.top ().parser_ = p;

        if (p)
          p->pre ();
      }
      else
      {
        ::xml_schema::string_pskel* p =
        dynamic_cast< ::xml_schema::string_pskel* > (
          this->::xml_schema::complex_content::context_.top ().parser_);

        if (p)
        {
          const ::std::string& tmp (p->post_string ());
          this->Hscale (tmp);
        }

        state = ~0UL;
      }

      break;
    }
    case 14UL:
    {
      if (start)
      {
        ::xml_schema::string_pskel* p = 0;

        if (t == 0 && this->Lscale_parser_ != 0)
          p = this->Lscale_parser_;
        else
        {
          ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

          if (t == 0)
            t = &ts;

          if (this->Lscale_parser_ != 0 && *t == ts)
            p = this->Lscale_parser_;
          else
          {
            if (t != &ts &&
                !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                  t->data (), ts))
              throw ::xsd::cxx::parser::dynamic_type< char > (*t);

            if (this->Lscale_parser_map_ != 0)
              p = dynamic_cast< ::xml_schema::string_pskel* > (
                this->Lscale_parser_map_->find (*t));
          }
        }

        this->::xml_schema::complex_content::context_.top ().parser_ = p;

        if (p)
          p->pre ();
      }
      else
      {
        ::xml_schema::string_pskel* p =
        dynamic_cast< ::xml_schema::string_pskel* > (
          this->::xml_schema::complex_content::context_.top ().parser_);

        if (p)
        {
          const ::std::string& tmp (p->post_string ());
          this->Lscale (tmp);
        }

        state = ~0UL;
      }

      break;
    }
    case 15UL:
    {
      if (start)
      {
        ::xml_schema::string_pskel* p = 0;

        if (t == 0 && this->Pscale_parser_ != 0)
          p = this->Pscale_parser_;
        else
        {
          ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

          if (t == 0)
            t = &ts;

          if (this->Pscale_parser_ != 0 && *t == ts)
            p = this->Pscale_parser_;
          else
          {
            if (t != &ts &&
                !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                  t->data (), ts))
              throw ::xsd::cxx::parser::dynamic_type< char > (*t);

            if (this->Pscale_parser_map_ != 0)
              p = dynamic_cast< ::xml_schema::string_pskel* > (
                this->Pscale_parser_map_->find (*t));
          }
        }

        this->::xml_schema::complex_content::context_.top ().parser_ = p;

        if (p)
          p->pre ();
      }
      else
      {
        ::xml_schema::string_pskel* p =
        dynamic_cast< ::xml_schema::string_pskel* > (
          this->::xml_schema::complex_content::context_.top ().parser_);

        if (p)
        {
          const ::std::string& tmp (p->post_string ());
          this->Pscale (tmp);
        }

        state = ~0UL;
      }

      break;
    }
    case 16UL:
    {
      if (start)
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->Clusterpoint_parser_;

        if (this->Clusterpoint_parser_)
          this->Clusterpoint_parser_->pre ();
      }
      else
      {
        if (this->Clusterpoint_parser_)
        {
          ::ClusterPoint_Struct& tmp (this->Clusterpoint_parser_->post_Clusterpoint ());
          this->Clusterpoint (tmp);
        }

        state = ~0UL;
      }

      break;
    }
    case 17UL:
    {
      if (start)
      {
        ::xml_schema::string_pskel* p = 0;

        if (t == 0 && this->Coords_parser_ != 0)
          p = this->Coords_parser_;
        else
        {
          ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

          if (t == 0)
            t = &ts;

          if (this->Coords_parser_ != 0 && *t == ts)
            p = this->Coords_parser_;
          else
          {
            if (t != &ts &&
                !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                  t->data (), ts))
              throw ::xsd::cxx::parser::dynamic_type< char > (*t);

            if (this->Coords_parser_map_ != 0)
              p = dynamic_cast< ::xml_schema::string_pskel* > (
                this->Coords_parser_map_->find (*t));
          }
        }

        this->::xml_schema::complex_content::context_.top ().parser_ = p;

        if (p)
          p->pre ();
      }
      else
      {
        ::xml_schema::string_pskel* p =
        dynamic_cast< ::xml_schema::string_pskel* > (
          this->::xml_schema::complex_content::context_.top ().parser_);

        if (p)
        {
          const ::std::string& tmp (p->post_string ());
          this->Coords (tmp);
        }

        state = ~0UL;
      }

      break;
    }
    case 18UL:
    {
      if (start)
      {
        ::xml_schema::string_pskel* p = 0;

        if (t == 0 && this->Source_parser_ != 0)
          p = this->Source_parser_;
        else
        {
          ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

          if (t == 0)
            t = &ts;

          if (this->Source_parser_ != 0 && *t == ts)
            p = this->Source_parser_;
          else
          {
            if (t != &ts &&
                !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                  t->data (), ts))
              throw ::xsd::cxx::parser::dynamic_type< char > (*t);

            if (this->Source_parser_map_ != 0)
              p = dynamic_cast< ::xml_schema::string_pskel* > (
                this->Source_parser_map_->find (*t));
          }
        }

        this->::xml_schema::complex_content::context_.top ().parser_ = p;

        if (p)
          p->pre ();
      }
      else
      {
        ::xml_schema::string_pskel* p =
        dynamic_cast< ::xml_schema::string_pskel* > (
          this->::xml_schema::complex_content::context_.top ().parser_);

        if (p)
        {
          const ::std::string& tmp (p->post_string ());
          this->Source (tmp);
        }

        state = ~0UL;
      }

      break;
    }
    case 19UL:
    {
      if (start)
      {
        ::xml_schema::string_pskel* p = 0;

        if (t == 0 && this->ReferenceFrame_parser_ != 0)
          p = this->ReferenceFrame_parser_;
        else
        {
          ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

          if (t == 0)
            t = &ts;

          if (this->ReferenceFrame_parser_ != 0 && *t == ts)
            p = this->ReferenceFrame_parser_;
          else
          {
            if (t != &ts &&
                !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                  t->data (), ts))
              throw ::xsd::cxx::parser::dynamic_type< char > (*t);

            if (this->ReferenceFrame_parser_map_ != 0)
              p = dynamic_cast< ::xml_schema::string_pskel* > (
                this->ReferenceFrame_parser_map_->find (*t));
          }
        }

        this->::xml_schema::complex_content::context_.top ().parser_ = p;

        if (p)
          p->pre ();
      }
      else
      {
        ::xml_schema::string_pskel* p =
        dynamic_cast< ::xml_schema::string_pskel* > (
          this->::xml_schema::complex_content::context_.top ().parser_);

        if (p)
        {
          const ::std::string& tmp (p->post_string ());
          this->ReferenceFrame (tmp);
        }

        state = ~0UL;
      }

      break;
    }
    case 20UL:
    {
      if (start)
      {
        ::xml_schema::string_pskel* p = 0;

        if (t == 0 && this->MeasuredDate_parser_ != 0)
          p = this->MeasuredDate_parser_;
        else
        {
          ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

          if (t == 0)
            t = &ts;

          if (this->MeasuredDate_parser_ != 0 && *t == ts)
            p = this->MeasuredDate_parser_;
          else
          {
            if (t != &ts &&
                !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                  t->data (), ts))
              throw ::xsd::cxx::parser::dynamic_type< char > (*t);

            if (this->MeasuredDate_parser_map_ != 0)
              p = dynamic_cast< ::xml_schema::string_pskel* > (
                this->MeasuredDate_parser_map_->find (*t));
          }
        }

        this->::xml_schema::complex_content::context_.top ().parser_ = p;

        if (p)
          p->pre ();
      }
      else
      {
        ::xml_schema::string_pskel* p =
        dynamic_cast< ::xml_schema::string_pskel* > (
          this->::xml_schema::complex_content::context_.top ().parser_);

        if (p)
        {
          const ::std::string& tmp (p->post_string ());
          this->MeasuredDate (tmp);
        }

        state = ~0UL;
      }

      break;
    }
  }
}

// Element validation and dispatch functions for DnaStation_pskel.
//
bool DnaStation_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if ((n == "Name" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "Name", t))
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &DnaStation_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "Name",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool DnaStation_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void DnaStation_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void DnaStation_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "Name");

  this->v_state_stack_.pop ();
}

void DnaStation_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if ((n == "Name" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "Name", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->Name_parser_ != 0)
            p = this->Name_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->Name_parser_ != 0 && *t == ts)
              p = this->Name_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->Name_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->Name_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->Name (tmp);
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "Name",
            ns, n);
        count = 0;
        state = 1UL;
        // Fall through.
      }
    }
    case 1UL:
    {
      if ((n == "Constraints" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "Constraints", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->Constraints_parser_ != 0)
            p = this->Constraints_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->Constraints_parser_ != 0 && *t == ts)
              p = this->Constraints_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->Constraints_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->Constraints_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->Constraints (tmp);
          }

          count = 0;
          state = 2UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "Constraints",
            ns, n);
        count = 0;
        state = 2UL;
        // Fall through.
      }
    }
    case 2UL:
    {
      if ((n == "Type" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "Type", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->Type_parser_ != 0)
            p = this->Type_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->Type_parser_ != 0 && *t == ts)
              p = this->Type_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->Type_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->Type_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->Type (tmp);
          }

          count = 0;
          state = 3UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "Type",
            ns, n);
        count = 0;
        state = 3UL;
        // Fall through.
      }
    }
    case 3UL:
    {
      if ((n == "StationCoord" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "StationCoord", t))
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->StationCoord_parser_;

          if (this->StationCoord_parser_)
            this->StationCoord_parser_->pre ();
        }
        else
        {
          if (this->StationCoord_parser_)
          {
            const ::StationCoord_Struct& tmp (this->StationCoord_parser_->post_StationCoord ());
            this->StationCoord (tmp);
          }

          count = 0;
          state = 4UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "StationCoord",
            ns, n);
        count = 0;
        state = 4UL;
        // Fall through.
      }
    }
    case 4UL:
    {
      if ((n == "Description" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "Description", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->Description_parser_ != 0)
            p = this->Description_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->Description_parser_ != 0 && *t == ts)
              p = this->Description_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->Description_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->Description_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->Description (tmp);
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for DnaXmlFormat_pskel.
//
bool DnaXmlFormat_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if ((n == "DnaStation" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "DnaStation", t))
        s = 0UL;
      else if ((n == "DnaMeasurement" && ns.empty ()) ||
               ::xsd::cxx::parser::substitution_map_instance< char > ().check (
                 ns, n, "", "DnaMeasurement", t))
        s = 1UL;

      if (s != ~0UL)
      {
        vd->count++;

        vd = vs.data + vs.size++;
        vd->func = &DnaXmlFormat_pskel::choice_0;
        vd->state = s;
        vd->count = 0;

        this->choice_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "DnaStation",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool DnaXmlFormat_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void DnaXmlFormat_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void DnaXmlFormat_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "DnaStation");

  this->v_state_stack_.pop ();
}

void DnaXmlFormat_pskel::
choice_0 (unsigned long& state,
          unsigned long& count,
          const ::xml_schema::ro_string& ns,
          const ::xml_schema::ro_string& n,
          const ::xml_schema::ro_string* t,
          bool start)
{
  XSD_UNUSED (count);
  XSD_UNUSED (ns);
  XSD_UNUSED (n);
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (start)
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->DnaStation_parser_;

        if (this->DnaStation_parser_)
          this->DnaStation_parser_->pre ();
      }
      else
      {
        if (this->DnaStation_parser_)
        {
          ::Station& tmp (this->DnaStation_parser_->post_DnaStation ());
          this->DnaStation (tmp);
        }

        state = ~0UL;
      }

      break;
    }
    case 1UL:
    {
      if (start)
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->DnaMeasurement_parser_;

        if (this->DnaMeasurement_parser_)
          this->DnaMeasurement_parser_->pre ();
      }
      else
      {
        if (this->DnaMeasurement_parser_)
        {
          ::DnaMeasurement* tmp (this->DnaMeasurement_parser_->post_DnaMeasurement ());
          this->DnaMeasurement (tmp);
        }

        state = ~0UL;
      }

      break;
    }
  }
}

// Element validation and dispatch functions for GPSBaseline_pskel.
//
bool GPSBaseline_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if ((n == "X" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "X", t))
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &GPSBaseline_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "X",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool GPSBaseline_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void GPSBaseline_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void GPSBaseline_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "X");

  this->v_state_stack_.pop ();
}

void GPSBaseline_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if ((n == "X" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "X", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->X_parser_ != 0)
            p = this->X_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->X_parser_ != 0 && *t == ts)
              p = this->X_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->X_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->X_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->X (tmp);
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "X",
            ns, n);
        count = 0;
        state = 1UL;
        // Fall through.
      }
    }
    case 1UL:
    {
      if ((n == "Y" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "Y", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->Y_parser_ != 0)
            p = this->Y_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->Y_parser_ != 0 && *t == ts)
              p = this->Y_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->Y_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->Y_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->Y (tmp);
          }

          count = 0;
          state = 2UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "Y",
            ns, n);
        count = 0;
        state = 2UL;
        // Fall through.
      }
    }
    case 2UL:
    {
      if ((n == "Z" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "Z", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->Z_parser_ != 0)
            p = this->Z_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->Z_parser_ != 0 && *t == ts)
              p = this->Z_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->Z_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->Z_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->Z (tmp);
          }

          count = 0;
          state = 3UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "Z",
            ns, n);
        count = 0;
        state = 3UL;
        // Fall through.
      }
    }
    case 3UL:
    {
      if ((n == "SigmaXX" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "SigmaXX", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->SigmaXX_parser_ != 0)
            p = this->SigmaXX_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->SigmaXX_parser_ != 0 && *t == ts)
              p = this->SigmaXX_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->SigmaXX_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->SigmaXX_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->SigmaXX (tmp);
          }

          count = 0;
          state = 4UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "SigmaXX",
            ns, n);
        count = 0;
        state = 4UL;
        // Fall through.
      }
    }
    case 4UL:
    {
      if ((n == "SigmaXY" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "SigmaXY", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->SigmaXY_parser_ != 0)
            p = this->SigmaXY_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->SigmaXY_parser_ != 0 && *t == ts)
              p = this->SigmaXY_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->SigmaXY_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->SigmaXY_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->SigmaXY (tmp);
          }

          count = 0;
          state = 5UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "SigmaXY",
            ns, n);
        count = 0;
        state = 5UL;
        // Fall through.
      }
    }
    case 5UL:
    {
      if ((n == "SigmaXZ" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "SigmaXZ", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->SigmaXZ_parser_ != 0)
            p = this->SigmaXZ_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->SigmaXZ_parser_ != 0 && *t == ts)
              p = this->SigmaXZ_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->SigmaXZ_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->SigmaXZ_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->SigmaXZ (tmp);
          }

          count = 0;
          state = 6UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "SigmaXZ",
            ns, n);
        count = 0;
        state = 6UL;
        // Fall through.
      }
    }
    case 6UL:
    {
      if ((n == "SigmaYY" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "SigmaYY", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->SigmaYY_parser_ != 0)
            p = this->SigmaYY_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->SigmaYY_parser_ != 0 && *t == ts)
              p = this->SigmaYY_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->SigmaYY_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->SigmaYY_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->SigmaYY (tmp);
          }

          count = 0;
          state = 7UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "SigmaYY",
            ns, n);
        count = 0;
        state = 7UL;
        // Fall through.
      }
    }
    case 7UL:
    {
      if ((n == "SigmaYZ" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "SigmaYZ", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->SigmaYZ_parser_ != 0)
            p = this->SigmaYZ_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->SigmaYZ_parser_ != 0 && *t == ts)
              p = this->SigmaYZ_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->SigmaYZ_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->SigmaYZ_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->SigmaYZ (tmp);
          }

          count = 0;
          state = 8UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "SigmaYZ",
            ns, n);
        count = 0;
        state = 8UL;
        // Fall through.
      }
    }
    case 8UL:
    {
      if ((n == "SigmaZZ" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "SigmaZZ", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->SigmaZZ_parser_ != 0)
            p = this->SigmaZZ_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->SigmaZZ_parser_ != 0 && *t == ts)
              p = this->SigmaZZ_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->SigmaZZ_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->SigmaZZ_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->SigmaZZ (tmp);
          }

          count = 0;
          state = 9UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "SigmaZZ",
            ns, n);
        count = 0;
        state = 9UL;
        // Fall through.
      }
    }
    case 9UL:
    {
      if ((n == "GPSCovariance" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "GPSCovariance", t))
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->GPSCovariance_parser_;

          if (this->GPSCovariance_parser_)
            this->GPSCovariance_parser_->pre ();
        }
        else
        {
          if (this->GPSCovariance_parser_)
          {
            const ::arma::mat33& tmp (this->GPSCovariance_parser_->post_GPSCovariance ());
            this->GPSCovariance (tmp);
          }

          count++;
        }

        break;
      }
      else
      {
        assert (start);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for GPSCovariance_pskel.
//
bool GPSCovariance_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if ((n == "m11" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "m11", t))
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &GPSCovariance_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "m11",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool GPSCovariance_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void GPSCovariance_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void GPSCovariance_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "m11");

  this->v_state_stack_.pop ();
}

void GPSCovariance_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if ((n == "m11" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "m11", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->m11_parser_ != 0)
            p = this->m11_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->m11_parser_ != 0 && *t == ts)
              p = this->m11_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->m11_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->m11_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->m11 (tmp);
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "m11",
            ns, n);
        count = 0;
        state = 1UL;
        // Fall through.
      }
    }
    case 1UL:
    {
      if ((n == "m12" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "m12", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->m12_parser_ != 0)
            p = this->m12_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->m12_parser_ != 0 && *t == ts)
              p = this->m12_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->m12_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->m12_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->m12 (tmp);
          }

          count = 0;
          state = 2UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "m12",
            ns, n);
        count = 0;
        state = 2UL;
        // Fall through.
      }
    }
    case 2UL:
    {
      if ((n == "m13" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "m13", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->m13_parser_ != 0)
            p = this->m13_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->m13_parser_ != 0 && *t == ts)
              p = this->m13_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->m13_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->m13_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->m13 (tmp);
          }

          count = 0;
          state = 3UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "m13",
            ns, n);
        count = 0;
        state = 3UL;
        // Fall through.
      }
    }
    case 3UL:
    {
      if ((n == "m21" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "m21", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->m21_parser_ != 0)
            p = this->m21_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->m21_parser_ != 0 && *t == ts)
              p = this->m21_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->m21_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->m21_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->m21 (tmp);
          }

          count = 0;
          state = 4UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "m21",
            ns, n);
        count = 0;
        state = 4UL;
        // Fall through.
      }
    }
    case 4UL:
    {
      if ((n == "m22" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "m22", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->m22_parser_ != 0)
            p = this->m22_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->m22_parser_ != 0 && *t == ts)
              p = this->m22_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->m22_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->m22_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->m22 (tmp);
          }

          count = 0;
          state = 5UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "m22",
            ns, n);
        count = 0;
        state = 5UL;
        // Fall through.
      }
    }
    case 5UL:
    {
      if ((n == "m23" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "m23", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->m23_parser_ != 0)
            p = this->m23_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->m23_parser_ != 0 && *t == ts)
              p = this->m23_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->m23_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->m23_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->m23 (tmp);
          }

          count = 0;
          state = 6UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "m23",
            ns, n);
        count = 0;
        state = 6UL;
        // Fall through.
      }
    }
    case 6UL:
    {
      if ((n == "m31" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "m31", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->m31_parser_ != 0)
            p = this->m31_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->m31_parser_ != 0 && *t == ts)
              p = this->m31_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->m31_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->m31_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->m31 (tmp);
          }

          count = 0;
          state = 7UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "m31",
            ns, n);
        count = 0;
        state = 7UL;
        // Fall through.
      }
    }
    case 7UL:
    {
      if ((n == "m32" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "m32", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->m32_parser_ != 0)
            p = this->m32_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->m32_parser_ != 0 && *t == ts)
              p = this->m32_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->m32_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->m32_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->m32 (tmp);
          }

          count = 0;
          state = 8UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "m32",
            ns, n);
        count = 0;
        state = 8UL;
        // Fall through.
      }
    }
    case 8UL:
    {
      if ((n == "m33" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "m33", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->m33_parser_ != 0)
            p = this->m33_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->m33_parser_ != 0 && *t == ts)
              p = this->m33_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->m33_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->m33_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->m33 (tmp);
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "m33",
            ns, n);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for PointCovariance_pskel.
//
bool PointCovariance_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if ((n == "m11" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "m11", t))
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &PointCovariance_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "m11",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool PointCovariance_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void PointCovariance_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void PointCovariance_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "m11");

  this->v_state_stack_.pop ();
}

void PointCovariance_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if ((n == "m11" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "m11", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->m11_parser_ != 0)
            p = this->m11_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->m11_parser_ != 0 && *t == ts)
              p = this->m11_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->m11_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->m11_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->m11 (tmp);
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "m11",
            ns, n);
        count = 0;
        state = 1UL;
        // Fall through.
      }
    }
    case 1UL:
    {
      if ((n == "m12" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "m12", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->m12_parser_ != 0)
            p = this->m12_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->m12_parser_ != 0 && *t == ts)
              p = this->m12_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->m12_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->m12_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->m12 (tmp);
          }

          count = 0;
          state = 2UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "m12",
            ns, n);
        count = 0;
        state = 2UL;
        // Fall through.
      }
    }
    case 2UL:
    {
      if ((n == "m13" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "m13", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->m13_parser_ != 0)
            p = this->m13_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->m13_parser_ != 0 && *t == ts)
              p = this->m13_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->m13_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->m13_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->m13 (tmp);
          }

          count = 0;
          state = 3UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "m13",
            ns, n);
        count = 0;
        state = 3UL;
        // Fall through.
      }
    }
    case 3UL:
    {
      if ((n == "m21" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "m21", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->m21_parser_ != 0)
            p = this->m21_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->m21_parser_ != 0 && *t == ts)
              p = this->m21_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->m21_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->m21_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->m21 (tmp);
          }

          count = 0;
          state = 4UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "m21",
            ns, n);
        count = 0;
        state = 4UL;
        // Fall through.
      }
    }
    case 4UL:
    {
      if ((n == "m22" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "m22", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->m22_parser_ != 0)
            p = this->m22_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->m22_parser_ != 0 && *t == ts)
              p = this->m22_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->m22_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->m22_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->m22 (tmp);
          }

          count = 0;
          state = 5UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "m22",
            ns, n);
        count = 0;
        state = 5UL;
        // Fall through.
      }
    }
    case 5UL:
    {
      if ((n == "m23" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "m23", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->m23_parser_ != 0)
            p = this->m23_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->m23_parser_ != 0 && *t == ts)
              p = this->m23_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->m23_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->m23_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->m23 (tmp);
          }

          count = 0;
          state = 6UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "m23",
            ns, n);
        count = 0;
        state = 6UL;
        // Fall through.
      }
    }
    case 6UL:
    {
      if ((n == "m31" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "m31", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->m31_parser_ != 0)
            p = this->m31_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->m31_parser_ != 0 && *t == ts)
              p = this->m31_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->m31_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->m31_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->m31 (tmp);
          }

          count = 0;
          state = 7UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "m31",
            ns, n);
        count = 0;
        state = 7UL;
        // Fall through.
      }
    }
    case 7UL:
    {
      if ((n == "m32" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "m32", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->m32_parser_ != 0)
            p = this->m32_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->m32_parser_ != 0 && *t == ts)
              p = this->m32_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->m32_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->m32_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->m32 (tmp);
          }

          count = 0;
          state = 8UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "m32",
            ns, n);
        count = 0;
        state = 8UL;
        // Fall through.
      }
    }
    case 8UL:
    {
      if ((n == "m33" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "m33", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->m33_parser_ != 0)
            p = this->m33_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->m33_parser_ != 0 && *t == ts)
              p = this->m33_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->m33_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->m33_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->m33 (tmp);
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "m33",
            ns, n);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for StationCoord_pskel.
//
bool StationCoord_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if ((n == "Name" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "Name", t))
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &StationCoord_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "Name",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool StationCoord_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void StationCoord_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void StationCoord_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "Name");

  this->v_state_stack_.pop ();
}

void StationCoord_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if ((n == "Name" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "Name", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->Name_parser_ != 0)
            p = this->Name_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->Name_parser_ != 0 && *t == ts)
              p = this->Name_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->Name_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->Name_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->Name (tmp);
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "Name",
            ns, n);
        count = 0;
        state = 1UL;
        // Fall through.
      }
    }
    case 1UL:
    {
      if ((n == "XAxis" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "XAxis", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->XAxis_parser_ != 0)
            p = this->XAxis_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->XAxis_parser_ != 0 && *t == ts)
              p = this->XAxis_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->XAxis_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->XAxis_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->XAxis (tmp);
          }

          count = 0;
          state = 2UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "XAxis",
            ns, n);
        count = 0;
        state = 2UL;
        // Fall through.
      }
    }
    case 2UL:
    {
      if ((n == "YAxis" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "YAxis", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->YAxis_parser_ != 0)
            p = this->YAxis_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->YAxis_parser_ != 0 && *t == ts)
              p = this->YAxis_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->YAxis_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->YAxis_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->YAxis (tmp);
          }

          count = 0;
          state = 3UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "YAxis",
            ns, n);
        count = 0;
        state = 3UL;
        // Fall through.
      }
    }
    case 3UL:
    {
      if ((n == "Height" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "Height", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->Height_parser_ != 0)
            p = this->Height_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->Height_parser_ != 0 && *t == ts)
              p = this->Height_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->Height_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->Height_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->Height (tmp);
          }

          count = 0;
          state = 4UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "Height",
            ns, n);
        count = 0;
        state = 4UL;
        // Fall through.
      }
    }
    case 4UL:
    {
      if ((n == "HemisphereZone" && ns.empty ()) ||
          ::xsd::cxx::parser::substitution_map_instance< char > ().check (
            ns, n, "", "HemisphereZone", t))
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->HemisphereZone_parser_ != 0)
            p = this->HemisphereZone_parser_;
          else
          {
            ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

            if (t == 0)
              t = &ts;

            if (this->HemisphereZone_parser_ != 0 && *t == ts)
              p = this->HemisphereZone_parser_;
            else
            {
              if (t != &ts &&
                  !::xsd::cxx::parser::validating::inheritance_map_instance< char > ().check (
                    t->data (), ts))
                throw ::xsd::cxx::parser::dynamic_type< char > (*t);

              if (this->HemisphereZone_parser_map_ != 0)
                p = dynamic_cast< ::xml_schema::string_pskel* > (
                  this->HemisphereZone_parser_map_->find (*t));
            }
          }

          this->::xml_schema::complex_content::context_.top ().parser_ = p;

          if (p)
            p->pre ();
        }
        else
        {
          ::xml_schema::string_pskel* p =
          dynamic_cast< ::xml_schema::string_pskel* > (
            this->::xml_schema::complex_content::context_.top ().parser_);

          if (p)
          {
            const ::std::string& tmp (p->post_string ());
            this->HemisphereZone (tmp);
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "HemisphereZone",
            ns, n);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

// Attribute validation and dispatch functions for DnaXmlFormat_pskel.
//
bool DnaXmlFormat_pskel::
_attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                           const ::xml_schema::ro_string& n,
                           const ::xml_schema::ro_string& s)
{
  if (n == "type" && ns.empty ())
  {
    if (this->type_parser_)
    {
      this->type_parser_->pre ();
      this->type_parser_->_pre_impl ();
      this->type_parser_->_characters (s);
      this->type_parser_->_post_impl ();
      this->type_parser_->post_type ();
      this->type ();
    }

    static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->type = true;
    return true;
  }

  return false;
}

void DnaXmlFormat_pskel::
_pre_a_validate ()
{
  this->v_state_attr_stack_.push ();
  v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

  as.type = false;
}

void DnaXmlFormat_pskel::
_post_a_validate ()
{
  v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

  if (!as.type)
    this->_expected_attribute (
      "", "type");

  this->v_state_attr_stack_.pop ();
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

