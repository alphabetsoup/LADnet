// Not copyrighted - public domain.
//
// This sample parser implementation was generated by CodeSynthesis XSD,
// an XML Schema to C++ data binding compiler. You may use it in your
// programs without any restrictions.
//

#include "DynaML-pimpl.hxx"

#include <iostream>

int
main (int argc, char* argv[])
{
  if (argc != 2)
  {
    std::cerr << "usage: " << argv[0] << " file.xml" << std::endl;
    return 1;
  }

  try
  {
    // Instantiate individual parsers.
    //
    ::DnaXmlFormat_pimpl DnaXmlFormat_p;
    ::DnaStation_pimpl DnaStation_p;
    ::xml_schema::string_pimpl string_p;
    ::StationCoord_pimpl StationCoord_p;
    ::DnaMeasurement_pimpl DnaMeasurement_p;
    ::Directions_pimpl Directions_p;
    ::GPSBaseline_pimpl GPSBaseline_p;
    ::GPSCovariance_pimpl GPSCovariance_p;
    ::Clusterpoint_pimpl Clusterpoint_p;
    ::PointCovariance_pimpl PointCovariance_p;
    ::type_pimpl type_p;

    // Connect the parsers together.
    //
    DnaXmlFormat_p.parsers (DnaStation_p,
                            DnaMeasurement_p,
                            type_p);

    DnaStation_p.parsers (string_p,
                          string_p,
                          string_p,
                          StationCoord_p,
                          string_p);

    StationCoord_p.parsers (string_p,
                            string_p,
                            string_p,
                            string_p,
                            string_p);

    DnaMeasurement_p.parsers (string_p,
                              string_p,
                              string_p,
                              string_p,
                              string_p,
                              string_p,
                              string_p,
                              string_p,
                              string_p,
                              string_p,
                              Directions_p,
                              string_p,
                              GPSBaseline_p,
                              string_p,
                              string_p,
                              string_p,
                              Clusterpoint_p,
                              string_p,
                              string_p,
                              string_p,
                              string_p);

    Directions_p.parsers (string_p,
                          string_p,
                          string_p,
                          string_p);

    GPSBaseline_p.parsers (string_p,
                           string_p,
                           string_p,
                           string_p,
                           string_p,
                           string_p,
                           string_p,
                           string_p,
                           string_p,
                           GPSCovariance_p);

    GPSCovariance_p.parsers (string_p,
                             string_p,
                             string_p,
                             string_p,
                             string_p,
                             string_p,
                             string_p,
                             string_p,
                             string_p);

    Clusterpoint_p.parsers (string_p,
                            string_p,
                            string_p,
                            string_p,
                            string_p,
                            string_p,
                            string_p,
                            string_p,
                            string_p,
                            PointCovariance_p);

    PointCovariance_p.parsers (string_p,
                               string_p,
                               string_p,
                               string_p,
                               string_p,
                               string_p,
                               string_p,
                               string_p,
                               string_p);

    // Parse the XML document.
    //
    ::xml_schema::document doc_p (DnaXmlFormat_p, "DnaXmlFormat");

    DnaXmlFormat_p.pre ();
    doc_p.parse (argv[1]);
    ::MeasNetwork v (DnaXmlFormat_p.post_DnaXmlFormat ());

    // TODO
    //
  }
  catch (const ::xml_schema::exception& e)
  {
    std::cerr << e << std::endl;
    return 1;
  }
  catch (const std::ios_base::failure&)
  {
    std::cerr << argv[1] << ": error: io failure" << std::endl;
    return 1;
  }
}

