// Not copyrighted - public domain.
//
// This sample parser implementation was generated by CodeSynthesis XSD,
// an XML Schema to C++ data binding compiler. You may use it in your
// programs without any restrictions.
//

#ifndef DYNA_ML_PIMPL_HXX
#define DYNA_ML_PIMPL_HXX

#include "DynaML-pskel.hxx"

class UsesMeasNetwork
{
public:	
  void setMeasNetwork(MeasNetwork *);
protected:
  MeasNetwork * _mn;
}

struct DnaMeasurement_Struct
{
  ::std::string _Type;
  ::std::string _Ignore;
  ::std::string _First;
  ::std::string _Second;
  ::std::string _Third;
  ::std::string _Value;
  ::std::string _StdDev;
  ::std::string _InstHeight;
  ::std::string _TargHeight;
  ::std::string _Total;
  //Directions (::Directions&);
  ::std::string _Vscale;
  //GPSBaseline (::GPSBaseline&);
  ::std::string _Hscale;
  ::std::string _Lscale;
  ::std::string _Pscale;
  //Clusterpoint (::YCluster&);
  ::std::string _Coords;
  ::std::string _Source;
  ::std::string _ReferenceFrame;
  ::std::string _MeasuredDate;
}

class Clusterpoint_pimpl: public virtual Clusterpoint_pskel, public UsesMeasNetwork
{
  public:
  virtual void
  pre ();

  virtual void
  X (const ::std::string&);

  virtual void
  Y (const ::std::string&);

  virtual void
  Z (const ::std::string&);

  virtual void
  SigmaXX (const ::std::string&);

  virtual void
  SigmaXY (const ::std::string&);

  virtual void
  SigmaXZ (const ::std::string&);

  virtual void
  SigmaYY (const ::std::string&);

  virtual void
  SigmaYZ (const ::std::string&);

  virtual void
  SigmaZZ (const ::std::string&);

  virtual void
  PointCovariance (const ::arma::mat33&);

  virtual ::ClusterPoint_Struct&
  post_Clusterpoint ();
protected:
  ::std::auto_ptr<::ClusterPoint_Struct> _y;

  double _X, _Y, _Z;
};

class Directions_pimpl: public virtual Directions_pskel, public UsesMeasNetwork
{
  public:
  virtual void
  pre ();

  virtual void
  Ignore (const ::std::string&);

  virtual void
  Target (const ::std::string&);

  virtual void
  Value (const ::std::string&);

  virtual void
  StdDev (const ::std::string&);

  virtual ::Directions_Struct&
  post_Directions ();
protected:
  ::std::auto_ptr<Directions_Struct> _d;
};

class DnaMeasurement_pimpl: public virtual DnaMeasurement_pskel, public UsesMeasNetwork{
  public:
  virtual void
  pre ();

  virtual void
  Type (const ::std::string&);

  virtual void
  Ignore (const ::std::string&);

  virtual void
  First (const ::std::string&);

  virtual void
  Second (const ::std::string&);

  virtual void
  Third (const ::std::string&);

  virtual void
  Value (const ::std::string&);

  virtual void
  StdDev (const ::std::string&);

  virtual void
  InstHeight (const ::std::string&);

  virtual void
  TargHeight (const ::std::string&);

  virtual void
  Total (const ::std::string&);

  virtual void
  Directions (::Directions_Struct&);

  virtual void
  Vscale (const ::std::string&);

  virtual void
  GPSBaseline (::GPSBaseline_Struct&);

  virtual void
  Hscale (const ::std::string&);

  virtual void
  Lscale (const ::std::string&);

  virtual void
  Pscale (const ::std::string&);

  virtual void
  Clusterpoint (::ClusterPoint_Struct&);

  virtual void
  Coords (const ::std::string&);

  virtual void
  Source (const ::std::string&);

  virtual void
  ReferenceFrame (const ::std::string&);

  virtual void
  MeasuredDate (const ::std::string&);

  virtual ::DnaMeasurement&
  post_DnaMeasurement ();
};

class DnaStation_pimpl: public virtual DnaStation_pskel, public UsesMeasNetwork
{
  public:
  virtual void
  pre ();

  virtual void
  Name (const ::std::string&);

  virtual void
  Constraints (const ::std::string&);

  virtual void
  Type (const ::std::string&);

  virtual void
  StationCoord (const ::StationCoord_Struct&);

  virtual void
  Description (const ::std::string&);

  virtual ::Station&
  post_DnaStation ();
protected:
  ::std::auto_ptr<Station> _stn;
};

class DnaXmlFormat_pimpl: public virtual DnaXmlFormat_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  DnaStation (::Station&);

  virtual void
  DnaMeasurement (::DnaMeasurement&);

  virtual void
  type ();

  virtual void
  post_DnaXmlFormat ();
};

class GPSBaseline_pimpl: public virtual GPSBaseline_pskel, public UsesMeasNetwork
{
  public:
  virtual void
  pre ();

  virtual void
  X (const ::std::string&);

  virtual void
  Y (const ::std::string&);

  virtual void
  Z (const ::std::string&);

  virtual void
  SigmaXX (const ::std::string&);

  virtual void
  SigmaXY (const ::std::string&);

  virtual void
  SigmaXZ (const ::std::string&);

  virtual void
  SigmaYY (const ::std::string&);

  virtual void
  SigmaYZ (const ::std::string&);

  virtual void
  SigmaZZ (const ::std::string&);

  virtual void
  GPSCovariance (const ::arma::mat33&);

  virtual ::GPSBaseline_Struct&
  post_GPSBaseline ();
  
protected:
  std::auto_ptr<GPSBaseline_Struct> _bl;
};

class GPSCovariance_pimpl: public virtual GPSCovariance_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  m11 (const ::std::string&);

  virtual void
  m12 (const ::std::string&);

  virtual void
  m13 (const ::std::string&);

  virtual void
  m21 (const ::std::string&);

  virtual void
  m22 (const ::std::string&);

  virtual void
  m23 (const ::std::string&);

  virtual void
  m31 (const ::std::string&);

  virtual void
  m32 (const ::std::string&);

  virtual void
  m33 (const ::std::string&);

  virtual ::arma::mat33
  post_GPSCovariance ();

protected:
	::arma::mat33 _pointcovar;
};

class PointCovariance_pimpl: public virtual PointCovariance_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  m11 (const ::std::string&);

  virtual void
  m12 (const ::std::string&);

  virtual void
  m13 (const ::std::string&);

  virtual void
  m21 (const ::std::string&);

  virtual void
  m22 (const ::std::string&);

  virtual void
  m23 (const ::std::string&);

  virtual void
  m31 (const ::std::string&);

  virtual void
  m32 (const ::std::string&);

  virtual void
  m33 (const ::std::string&);

  virtual ::arma::mat33
  post_PointCovariance ();

protected:
	::arma::mat33 _pointcovar;
};

class StationCoord_pimpl: public virtual StationCoord_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  Name (const ::std::string&);

  virtual void
  XAxis (const ::std::string&);

  virtual void
  YAxis (const ::std::string&);

  virtual void
  Height (const ::std::string&);

  virtual void
  HemisphereZone (const ::std::string&);

  virtual ::StationCoord_Struct
  post_StationCoord ();
protected:
  ::std::auto_ptr<StationCoord_Struct> _stncoord;
};

class type_pimpl: public virtual type_pskel,
  public ::xml_schema::string_pimpl
{
  public:
  virtual void
  pre ();

  virtual void
  post_type ();
};

#endif // DYNA_ML_PIMPL_HXX
