// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef DYNA_ML_PSKEL_HXX
#define DYNA_ML_PSKEL_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

// Forward declarations
//
class Clusterpoint_pskel;
class Directions_pskel;
class DnaMeasurement_pskel;
class DnaStation_pskel;
class DnaXmlFormat_pskel;
class GPSBaseline_pskel;
class GPSCovariance_pskel;
class PointCovariance_pskel;
class StationCoord_pskel;
class type_pskel;

// Forward declarations of structs
//
struct Symmetric33;
struct ClusterPoint_Struct;
struct GPSBaseline_Struct;
struct Directions_Struct;
struct StationCoord_Struct;
struct Station_Struct;
struct DnaMeasurement_Struct;

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_PARSER_USE_CHAR
#define XSD_CXX_PARSER_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>
#include <xsd/cxx/xml/error-handler.hxx>
#include <xsd/cxx/parser/exceptions.hxx>
#include <xsd/cxx/parser/elements.hxx>
#include <xsd/cxx/parser/xml-schema.hxx>
#include <xsd/cxx/parser/map.hxx>
#include <xsd/cxx/parser/validating/parser.hxx>
#include <xsd/cxx/parser/validating/exceptions.hxx>
#include <xsd/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsd/cxx/parser/validating/xml-schema-pimpl.hxx>
#include <xsd/cxx/parser/xerces/elements.hxx>

#include <armadillo>
#include "YCluster.h"
#include "Station.h"
#include "MeasNetwork.h"
#include "GPSBaseline.h"
#include "DnaMeasurement.h"
#include "Directions.h"

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  typedef ::xsd::cxx::parser::string_sequence< char > string_sequence;
  typedef ::xsd::cxx::parser::qname< char > qname;
  typedef ::xsd::cxx::parser::buffer buffer;
  typedef ::xsd::cxx::parser::time_zone time_zone;
  typedef ::xsd::cxx::parser::gday gday;
  typedef ::xsd::cxx::parser::gmonth gmonth;
  typedef ::xsd::cxx::parser::gyear gyear;
  typedef ::xsd::cxx::parser::gmonth_day gmonth_day;
  typedef ::xsd::cxx::parser::gyear_month gyear_month;
  typedef ::xsd::cxx::parser::date date;
  typedef ::xsd::cxx::parser::time time;
  typedef ::xsd::cxx::parser::date_time date_time;
  typedef ::xsd::cxx::parser::duration duration;

  // Base parser skeletons.
  //
  typedef ::xsd::cxx::parser::parser_base< char > parser_base;
  typedef ::xsd::cxx::parser::validating::empty_content< char > empty_content;
  typedef ::xsd::cxx::parser::validating::simple_content< char > simple_content;
  typedef ::xsd::cxx::parser::validating::complex_content< char > complex_content;
  typedef ::xsd::cxx::parser::validating::list_base< char > list_base;

  // Parser map interface and default implementation.
  //
  typedef ::xsd::cxx::parser::parser_map< char > parser_map;
  typedef ::xsd::cxx::parser::parser_map_impl< char > parser_map_impl;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  typedef ::xsd::cxx::parser::validating::any_type_pskel< char > any_type_pskel;
  typedef ::xsd::cxx::parser::validating::any_type_pimpl< char > any_type_pimpl;

  typedef ::xsd::cxx::parser::validating::any_simple_type_pskel< char > any_simple_type_pskel;
  typedef ::xsd::cxx::parser::validating::any_simple_type_pimpl< char > any_simple_type_pimpl;

  typedef ::xsd::cxx::parser::validating::byte_pskel< char > byte_pskel;
  typedef ::xsd::cxx::parser::validating::byte_pimpl< char > byte_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_byte_pskel< char > unsigned_byte_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_byte_pimpl< char > unsigned_byte_pimpl;

  typedef ::xsd::cxx::parser::validating::short_pskel< char > short_pskel;
  typedef ::xsd::cxx::parser::validating::short_pimpl< char > short_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_short_pskel< char > unsigned_short_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_short_pimpl< char > unsigned_short_pimpl;

  typedef ::xsd::cxx::parser::validating::int_pskel< char > int_pskel;
  typedef ::xsd::cxx::parser::validating::int_pimpl< char > int_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_int_pskel< char > unsigned_int_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_int_pimpl< char > unsigned_int_pimpl;

  typedef ::xsd::cxx::parser::validating::long_pskel< char > long_pskel;
  typedef ::xsd::cxx::parser::validating::long_pimpl< char > long_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_long_pskel< char > unsigned_long_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_long_pimpl< char > unsigned_long_pimpl;

  typedef ::xsd::cxx::parser::validating::integer_pskel< char > integer_pskel;
  typedef ::xsd::cxx::parser::validating::integer_pimpl< char > integer_pimpl;

  typedef ::xsd::cxx::parser::validating::non_positive_integer_pskel< char > non_positive_integer_pskel;
  typedef ::xsd::cxx::parser::validating::non_positive_integer_pimpl< char > non_positive_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::non_negative_integer_pskel< char > non_negative_integer_pskel;
  typedef ::xsd::cxx::parser::validating::non_negative_integer_pimpl< char > non_negative_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::positive_integer_pskel< char > positive_integer_pskel;
  typedef ::xsd::cxx::parser::validating::positive_integer_pimpl< char > positive_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::negative_integer_pskel< char > negative_integer_pskel;
  typedef ::xsd::cxx::parser::validating::negative_integer_pimpl< char > negative_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::boolean_pskel< char > boolean_pskel;
  typedef ::xsd::cxx::parser::validating::boolean_pimpl< char > boolean_pimpl;

  typedef ::xsd::cxx::parser::validating::float_pskel< char > float_pskel;
  typedef ::xsd::cxx::parser::validating::float_pimpl< char > float_pimpl;

  typedef ::xsd::cxx::parser::validating::double_pskel< char > double_pskel;
  typedef ::xsd::cxx::parser::validating::double_pimpl< char > double_pimpl;

  typedef ::xsd::cxx::parser::validating::decimal_pskel< char > decimal_pskel;
  typedef ::xsd::cxx::parser::validating::decimal_pimpl< char > decimal_pimpl;

  typedef ::xsd::cxx::parser::validating::string_pskel< char > string_pskel;
  typedef ::xsd::cxx::parser::validating::string_pimpl< char > string_pimpl;

  typedef ::xsd::cxx::parser::validating::normalized_string_pskel< char > normalized_string_pskel;
  typedef ::xsd::cxx::parser::validating::normalized_string_pimpl< char > normalized_string_pimpl;

  typedef ::xsd::cxx::parser::validating::token_pskel< char > token_pskel;
  typedef ::xsd::cxx::parser::validating::token_pimpl< char > token_pimpl;

  typedef ::xsd::cxx::parser::validating::name_pskel< char > name_pskel;
  typedef ::xsd::cxx::parser::validating::name_pimpl< char > name_pimpl;

  typedef ::xsd::cxx::parser::validating::nmtoken_pskel< char > nmtoken_pskel;
  typedef ::xsd::cxx::parser::validating::nmtoken_pimpl< char > nmtoken_pimpl;

  typedef ::xsd::cxx::parser::validating::nmtokens_pskel< char > nmtokens_pskel;
  typedef ::xsd::cxx::parser::validating::nmtokens_pimpl< char > nmtokens_pimpl;

  typedef ::xsd::cxx::parser::validating::ncname_pskel< char > ncname_pskel;
  typedef ::xsd::cxx::parser::validating::ncname_pimpl< char > ncname_pimpl;

  typedef ::xsd::cxx::parser::validating::language_pskel< char > language_pskel;
  typedef ::xsd::cxx::parser::validating::language_pimpl< char > language_pimpl;

  typedef ::xsd::cxx::parser::validating::id_pskel< char > id_pskel;
  typedef ::xsd::cxx::parser::validating::id_pimpl< char > id_pimpl;

  typedef ::xsd::cxx::parser::validating::idref_pskel< char > idref_pskel;
  typedef ::xsd::cxx::parser::validating::idref_pimpl< char > idref_pimpl;

  typedef ::xsd::cxx::parser::validating::idrefs_pskel< char > idrefs_pskel;
  typedef ::xsd::cxx::parser::validating::idrefs_pimpl< char > idrefs_pimpl;

  typedef ::xsd::cxx::parser::validating::uri_pskel< char > uri_pskel;
  typedef ::xsd::cxx::parser::validating::uri_pimpl< char > uri_pimpl;

  typedef ::xsd::cxx::parser::validating::qname_pskel< char > qname_pskel;
  typedef ::xsd::cxx::parser::validating::qname_pimpl< char > qname_pimpl;

  typedef ::xsd::cxx::parser::validating::base64_binary_pskel< char > base64_binary_pskel;
  typedef ::xsd::cxx::parser::validating::base64_binary_pimpl< char > base64_binary_pimpl;

  typedef ::xsd::cxx::parser::validating::hex_binary_pskel< char > hex_binary_pskel;
  typedef ::xsd::cxx::parser::validating::hex_binary_pimpl< char > hex_binary_pimpl;

  typedef ::xsd::cxx::parser::validating::date_pskel< char > date_pskel;
  typedef ::xsd::cxx::parser::validating::date_pimpl< char > date_pimpl;

  typedef ::xsd::cxx::parser::validating::date_time_pskel< char > date_time_pskel;
  typedef ::xsd::cxx::parser::validating::date_time_pimpl< char > date_time_pimpl;

  typedef ::xsd::cxx::parser::validating::duration_pskel< char > duration_pskel;
  typedef ::xsd::cxx::parser::validating::duration_pimpl< char > duration_pimpl;

  typedef ::xsd::cxx::parser::validating::gday_pskel< char > gday_pskel;
  typedef ::xsd::cxx::parser::validating::gday_pimpl< char > gday_pimpl;

  typedef ::xsd::cxx::parser::validating::gmonth_pskel< char > gmonth_pskel;
  typedef ::xsd::cxx::parser::validating::gmonth_pimpl< char > gmonth_pimpl;

  typedef ::xsd::cxx::parser::validating::gmonth_day_pskel< char > gmonth_day_pskel;
  typedef ::xsd::cxx::parser::validating::gmonth_day_pimpl< char > gmonth_day_pimpl;

  typedef ::xsd::cxx::parser::validating::gyear_pskel< char > gyear_pskel;
  typedef ::xsd::cxx::parser::validating::gyear_pimpl< char > gyear_pimpl;

  typedef ::xsd::cxx::parser::validating::gyear_month_pskel< char > gyear_month_pskel;
  typedef ::xsd::cxx::parser::validating::gyear_month_pimpl< char > gyear_month_pimpl;

  typedef ::xsd::cxx::parser::validating::time_pskel< char > time_pskel;
  typedef ::xsd::cxx::parser::validating::time_pimpl< char > time_pimpl;

  // Exceptions. See libxsd/xsd/cxx/parser/exceptions.hxx for details.
  //
  typedef ::xsd::cxx::parser::exception< char > exception;

  // Parsing diagnostics.
  //
  typedef ::xsd::cxx::parser::severity severity;
  typedef ::xsd::cxx::parser::error< char > error;
  typedef ::xsd::cxx::parser::diagnostics< char > diagnostics;
  typedef ::xsd::cxx::parser::parsing< char > parsing;

  // Error handler. See libxsd/xsd/cxx/xml/error-handler.hxx for details.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // Read-only string.
  //
  typedef ::xsd::cxx::ro_string< char > ro_string;

  // Parsing flags. See libxsd/xsd/cxx/parser/xerces/elements.hxx
  // for details.
  //
  typedef ::xsd::cxx::parser::xerces::flags flags;

  // Parsing properties. See libxsd/xsd/cxx/parser/xerces/elements.hxx
  // for details.
  //
  typedef ::xsd::cxx::parser::xerces::properties< char > properties;

  // Document type. See libxsd/xsd/cxx/parser/xerces/elements.hxx
  // for details.
  //
  typedef ::xsd::cxx::parser::xerces::document< char > document;
}

class Clusterpoint_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  X (const ::std::string&);

  virtual void
  Y (const ::std::string&);

  virtual void
  Z (const ::std::string&);

  virtual void
  SigmaXX (const ::std::string&);

  virtual void
  SigmaXY (const ::std::string&);

  virtual void
  SigmaXZ (const ::std::string&);

  virtual void
  SigmaYY (const ::std::string&);

  virtual void
  SigmaYZ (const ::std::string&);

  virtual void
  SigmaZZ (const ::std::string&);

  virtual void
  PointCovariance (const ::arma::mat33&);

  virtual ::ClusterPoint_Struct&
  post_Clusterpoint () = 0;

  // Parser construction API.
  //
  void
  X_parser (::xml_schema::string_pskel&);

  void
  X_parser (const ::xml_schema::parser_map&);

  void
  Y_parser (::xml_schema::string_pskel&);

  void
  Y_parser (const ::xml_schema::parser_map&);

  void
  Z_parser (::xml_schema::string_pskel&);

  void
  Z_parser (const ::xml_schema::parser_map&);

  void
  SigmaXX_parser (::xml_schema::string_pskel&);

  void
  SigmaXX_parser (const ::xml_schema::parser_map&);

  void
  SigmaXY_parser (::xml_schema::string_pskel&);

  void
  SigmaXY_parser (const ::xml_schema::parser_map&);

  void
  SigmaXZ_parser (::xml_schema::string_pskel&);

  void
  SigmaXZ_parser (const ::xml_schema::parser_map&);

  void
  SigmaYY_parser (::xml_schema::string_pskel&);

  void
  SigmaYY_parser (const ::xml_schema::parser_map&);

  void
  SigmaYZ_parser (::xml_schema::string_pskel&);

  void
  SigmaYZ_parser (const ::xml_schema::parser_map&);

  void
  SigmaZZ_parser (::xml_schema::string_pskel&);

  void
  SigmaZZ_parser (const ::xml_schema::parser_map&);

  void
  PointCovariance_parser (::PointCovariance_pskel&);

  void
  parsers (::xml_schema::string_pskel& /* X */,
           ::xml_schema::string_pskel& /* Y */,
           ::xml_schema::string_pskel& /* Z */,
           ::xml_schema::string_pskel& /* SigmaXX */,
           ::xml_schema::string_pskel& /* SigmaXY */,
           ::xml_schema::string_pskel& /* SigmaXZ */,
           ::xml_schema::string_pskel& /* SigmaYY */,
           ::xml_schema::string_pskel& /* SigmaYZ */,
           ::xml_schema::string_pskel& /* SigmaZZ */,
           ::PointCovariance_pskel& /* PointCovariance */);

  // Constructor.
  //
  Clusterpoint_pskel ();

  public:
  static const char*
  _static_type ();

  virtual const char*
  _dynamic_type () const;

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::string_pskel* X_parser_;
  const ::xml_schema::parser_map* X_parser_map_;

  ::xml_schema::string_pskel* Y_parser_;
  const ::xml_schema::parser_map* Y_parser_map_;

  ::xml_schema::string_pskel* Z_parser_;
  const ::xml_schema::parser_map* Z_parser_map_;

  ::xml_schema::string_pskel* SigmaXX_parser_;
  const ::xml_schema::parser_map* SigmaXX_parser_map_;

  ::xml_schema::string_pskel* SigmaXY_parser_;
  const ::xml_schema::parser_map* SigmaXY_parser_map_;

  ::xml_schema::string_pskel* SigmaXZ_parser_;
  const ::xml_schema::parser_map* SigmaXZ_parser_map_;

  ::xml_schema::string_pskel* SigmaYY_parser_;
  const ::xml_schema::parser_map* SigmaYY_parser_map_;

  ::xml_schema::string_pskel* SigmaYZ_parser_;
  const ::xml_schema::parser_map* SigmaYZ_parser_map_;

  ::xml_schema::string_pskel* SigmaZZ_parser_;
  const ::xml_schema::parser_map* SigmaZZ_parser_map_;

  ::PointCovariance_pskel* PointCovariance_parser_;

  protected:
  struct v_state_descr_
  {
    void (::Clusterpoint_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string*,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsd::cxx::parser::pod_stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);
};

class Directions_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  Ignore (const ::std::string&);

  virtual void
  Target (const ::std::string&);

  virtual void
  Value (const ::std::string&);

  virtual void
  StdDev (const ::std::string&);

  virtual ::Directions_Struct&
  post_Directions () = 0;

  // Parser construction API.
  //
  void
  Ignore_parser (::xml_schema::string_pskel&);

  void
  Ignore_parser (const ::xml_schema::parser_map&);

  void
  Target_parser (::xml_schema::string_pskel&);

  void
  Target_parser (const ::xml_schema::parser_map&);

  void
  Value_parser (::xml_schema::string_pskel&);

  void
  Value_parser (const ::xml_schema::parser_map&);

  void
  StdDev_parser (::xml_schema::string_pskel&);

  void
  StdDev_parser (const ::xml_schema::parser_map&);

  void
  parsers (::xml_schema::string_pskel& /* Ignore */,
           ::xml_schema::string_pskel& /* Target */,
           ::xml_schema::string_pskel& /* Value */,
           ::xml_schema::string_pskel& /* StdDev */);

  // Constructor.
  //
  Directions_pskel ();

  public:
  static const char*
  _static_type ();

  virtual const char*
  _dynamic_type () const;

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::string_pskel* Ignore_parser_;
  const ::xml_schema::parser_map* Ignore_parser_map_;

  ::xml_schema::string_pskel* Target_parser_;
  const ::xml_schema::parser_map* Target_parser_map_;

  ::xml_schema::string_pskel* Value_parser_;
  const ::xml_schema::parser_map* Value_parser_map_;

  ::xml_schema::string_pskel* StdDev_parser_;
  const ::xml_schema::parser_map* StdDev_parser_map_;


  protected:
  struct v_state_descr_
  {
    void (::Directions_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string*,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsd::cxx::parser::pod_stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);
};

class DnaMeasurement_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  Type (const ::std::string&);

  virtual void
  Ignore (const ::std::string&);

  virtual void
  First (const ::std::string&);

  virtual void
  Second (const ::std::string&);

  virtual void
  Third (const ::std::string&);

  virtual void
  Value (const ::std::string&);

  virtual void
  StdDev (const ::std::string&);

  virtual void
  InstHeight (const ::std::string&);

  virtual void
  TargHeight (const ::std::string&);

  virtual void
  Total (const ::std::string&);

  virtual void
  Directions (::Directions_Struct&);

  virtual void
  Vscale (const ::std::string&);

  virtual void
  GPSBaseline (::GPSBaseline_Struct&);

  virtual void
  Hscale (const ::std::string&);

  virtual void
  Lscale (const ::std::string&);

  virtual void
  Pscale (const ::std::string&);

  virtual void
  Clusterpoint (::ClusterPoint_Struct&);

  virtual void
  Coords (const ::std::string&);

  virtual void
  Source (const ::std::string&);

  virtual void
  ReferenceFrame (const ::std::string&);

  virtual void
  MeasuredDate (const ::std::string&);

  virtual ::DnaMeasurement*
  post_DnaMeasurement () = 0;

  // Parser construction API.
  //
  void
  Type_parser (::xml_schema::string_pskel&);

  void
  Type_parser (const ::xml_schema::parser_map&);

  void
  Ignore_parser (::xml_schema::string_pskel&);

  void
  Ignore_parser (const ::xml_schema::parser_map&);

  void
  First_parser (::xml_schema::string_pskel&);

  void
  First_parser (const ::xml_schema::parser_map&);

  void
  Second_parser (::xml_schema::string_pskel&);

  void
  Second_parser (const ::xml_schema::parser_map&);

  void
  Third_parser (::xml_schema::string_pskel&);

  void
  Third_parser (const ::xml_schema::parser_map&);

  void
  Value_parser (::xml_schema::string_pskel&);

  void
  Value_parser (const ::xml_schema::parser_map&);

  void
  StdDev_parser (::xml_schema::string_pskel&);

  void
  StdDev_parser (const ::xml_schema::parser_map&);

  void
  InstHeight_parser (::xml_schema::string_pskel&);

  void
  InstHeight_parser (const ::xml_schema::parser_map&);

  void
  TargHeight_parser (::xml_schema::string_pskel&);

  void
  TargHeight_parser (const ::xml_schema::parser_map&);

  void
  Total_parser (::xml_schema::string_pskel&);

  void
  Total_parser (const ::xml_schema::parser_map&);

  void
  Directions_parser (::Directions_pskel&);

  void
  Vscale_parser (::xml_schema::string_pskel&);

  void
  Vscale_parser (const ::xml_schema::parser_map&);

  void
  GPSBaseline_parser (::GPSBaseline_pskel&);

  void
  Hscale_parser (::xml_schema::string_pskel&);

  void
  Hscale_parser (const ::xml_schema::parser_map&);

  void
  Lscale_parser (::xml_schema::string_pskel&);

  void
  Lscale_parser (const ::xml_schema::parser_map&);

  void
  Pscale_parser (::xml_schema::string_pskel&);

  void
  Pscale_parser (const ::xml_schema::parser_map&);

  void
  Clusterpoint_parser (::Clusterpoint_pskel&);

  void
  Coords_parser (::xml_schema::string_pskel&);

  void
  Coords_parser (const ::xml_schema::parser_map&);

  void
  Source_parser (::xml_schema::string_pskel&);

  void
  Source_parser (const ::xml_schema::parser_map&);

  void
  ReferenceFrame_parser (::xml_schema::string_pskel&);

  void
  ReferenceFrame_parser (const ::xml_schema::parser_map&);

  void
  MeasuredDate_parser (::xml_schema::string_pskel&);

  void
  MeasuredDate_parser (const ::xml_schema::parser_map&);

  void
  parsers (::xml_schema::string_pskel& /* Type */,
           ::xml_schema::string_pskel& /* Ignore */,
           ::xml_schema::string_pskel& /* First */,
           ::xml_schema::string_pskel& /* Second */,
           ::xml_schema::string_pskel& /* Third */,
           ::xml_schema::string_pskel& /* Value */,
           ::xml_schema::string_pskel& /* StdDev */,
           ::xml_schema::string_pskel& /* InstHeight */,
           ::xml_schema::string_pskel& /* TargHeight */,
           ::xml_schema::string_pskel& /* Total */,
           ::Directions_pskel& /* Directions */,
           ::xml_schema::string_pskel& /* Vscale */,
           ::GPSBaseline_pskel& /* GPSBaseline */,
           ::xml_schema::string_pskel& /* Hscale */,
           ::xml_schema::string_pskel& /* Lscale */,
           ::xml_schema::string_pskel& /* Pscale */,
           ::Clusterpoint_pskel& /* Clusterpoint */,
           ::xml_schema::string_pskel& /* Coords */,
           ::xml_schema::string_pskel& /* Source */,
           ::xml_schema::string_pskel& /* ReferenceFrame */,
           ::xml_schema::string_pskel& /* MeasuredDate */);

  // Constructor.
  //
  DnaMeasurement_pskel ();

  public:
  static const char*
  _static_type ();

  virtual const char*
  _dynamic_type () const;

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::string_pskel* Type_parser_;
  const ::xml_schema::parser_map* Type_parser_map_;

  ::xml_schema::string_pskel* Ignore_parser_;
  const ::xml_schema::parser_map* Ignore_parser_map_;

  ::xml_schema::string_pskel* First_parser_;
  const ::xml_schema::parser_map* First_parser_map_;

  ::xml_schema::string_pskel* Second_parser_;
  const ::xml_schema::parser_map* Second_parser_map_;

  ::xml_schema::string_pskel* Third_parser_;
  const ::xml_schema::parser_map* Third_parser_map_;

  ::xml_schema::string_pskel* Value_parser_;
  const ::xml_schema::parser_map* Value_parser_map_;

  ::xml_schema::string_pskel* StdDev_parser_;
  const ::xml_schema::parser_map* StdDev_parser_map_;

  ::xml_schema::string_pskel* InstHeight_parser_;
  const ::xml_schema::parser_map* InstHeight_parser_map_;

  ::xml_schema::string_pskel* TargHeight_parser_;
  const ::xml_schema::parser_map* TargHeight_parser_map_;

  ::xml_schema::string_pskel* Total_parser_;
  const ::xml_schema::parser_map* Total_parser_map_;

  ::Directions_pskel* Directions_parser_;
  ::xml_schema::string_pskel* Vscale_parser_;
  const ::xml_schema::parser_map* Vscale_parser_map_;

  ::GPSBaseline_pskel* GPSBaseline_parser_;
  ::xml_schema::string_pskel* Hscale_parser_;
  const ::xml_schema::parser_map* Hscale_parser_map_;

  ::xml_schema::string_pskel* Lscale_parser_;
  const ::xml_schema::parser_map* Lscale_parser_map_;

  ::xml_schema::string_pskel* Pscale_parser_;
  const ::xml_schema::parser_map* Pscale_parser_map_;

  ::Clusterpoint_pskel* Clusterpoint_parser_;
  ::xml_schema::string_pskel* Coords_parser_;
  const ::xml_schema::parser_map* Coords_parser_map_;

  ::xml_schema::string_pskel* Source_parser_;
  const ::xml_schema::parser_map* Source_parser_map_;

  ::xml_schema::string_pskel* ReferenceFrame_parser_;
  const ::xml_schema::parser_map* ReferenceFrame_parser_map_;

  ::xml_schema::string_pskel* MeasuredDate_parser_;
  const ::xml_schema::parser_map* MeasuredDate_parser_map_;


  protected:
  struct v_state_descr_
  {
    void (::DnaMeasurement_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string*,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsd::cxx::parser::pod_stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  choice_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start);
};

class DnaStation_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  Name (const ::std::string&);

  virtual void
  Constraints (const ::std::string&);

  virtual void
  Type (const ::std::string&);

  virtual void
  StationCoord (const ::StationCoord_Struct&);

  virtual void
  Description (const ::std::string&);

  virtual ::Station&
  post_DnaStation () = 0;

  // Parser construction API.
  //
  void
  Name_parser (::xml_schema::string_pskel&);

  void
  Name_parser (const ::xml_schema::parser_map&);

  void
  Constraints_parser (::xml_schema::string_pskel&);

  void
  Constraints_parser (const ::xml_schema::parser_map&);

  void
  Type_parser (::xml_schema::string_pskel&);

  void
  Type_parser (const ::xml_schema::parser_map&);

  void
  StationCoord_parser (::StationCoord_pskel&);

  void
  Description_parser (::xml_schema::string_pskel&);

  void
  Description_parser (const ::xml_schema::parser_map&);

  void
  parsers (::xml_schema::string_pskel& /* Name */,
           ::xml_schema::string_pskel& /* Constraints */,
           ::xml_schema::string_pskel& /* Type */,
           ::StationCoord_pskel& /* StationCoord */,
           ::xml_schema::string_pskel& /* Description */);

  // Constructor.
  //
  DnaStation_pskel ();

  public:
  static const char*
  _static_type ();

  virtual const char*
  _dynamic_type () const;

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::string_pskel* Name_parser_;
  const ::xml_schema::parser_map* Name_parser_map_;

  ::xml_schema::string_pskel* Constraints_parser_;
  const ::xml_schema::parser_map* Constraints_parser_map_;

  ::xml_schema::string_pskel* Type_parser_;
  const ::xml_schema::parser_map* Type_parser_map_;

  ::StationCoord_pskel* StationCoord_parser_;
  ::xml_schema::string_pskel* Description_parser_;
  const ::xml_schema::parser_map* Description_parser_map_;


  protected:
  struct v_state_descr_
  {
    void (::DnaStation_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string*,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsd::cxx::parser::pod_stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);
};

class DnaXmlFormat_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  DnaStation (::Station&);

  virtual void
  DnaMeasurement (::DnaMeasurement*);

  virtual void
  type ();

  virtual void
  post_DnaXmlFormat ();

  // Parser construction API.
  //
  void
  DnaStation_parser (::DnaStation_pskel&);

  void
  DnaMeasurement_parser (::DnaMeasurement_pskel&);

  void
  type_parser (::type_pskel&);

  void
  parsers (::DnaStation_pskel& /* DnaStation */,
           ::DnaMeasurement_pskel& /* DnaMeasurement */,
           ::type_pskel& /* type */);

  // Constructor.
  //
  DnaXmlFormat_pskel ();

  public:
  static const char*
  _static_type ();

  virtual const char*
  _dynamic_type () const;

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  virtual bool
  _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&);


  protected:
  ::DnaStation_pskel* DnaStation_parser_;
  ::DnaMeasurement_pskel* DnaMeasurement_parser_;
  ::type_pskel* type_parser_;

  protected:
  struct v_state_descr_
  {
    void (::DnaXmlFormat_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string*,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsd::cxx::parser::pod_stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  choice_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start);

  protected:
  struct v_state_attr_
  {
    bool type;
  };

  v_state_attr_ v_state_attr_first_;
  ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

  virtual void
  _pre_a_validate ();

  virtual void
  _post_a_validate ();
};

class GPSBaseline_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  X (const ::std::string&);

  virtual void
  Y (const ::std::string&);

  virtual void
  Z (const ::std::string&);

  virtual void
  SigmaXX (const ::std::string&);

  virtual void
  SigmaXY (const ::std::string&);

  virtual void
  SigmaXZ (const ::std::string&);

  virtual void
  SigmaYY (const ::std::string&);

  virtual void
  SigmaYZ (const ::std::string&);

  virtual void
  SigmaZZ (const ::std::string&);

  virtual void
  GPSCovariance (const ::arma::mat33&);

  virtual ::GPSBaseline_Struct&
  post_GPSBaseline () = 0;

  // Parser construction API.
  //
  void
  X_parser (::xml_schema::string_pskel&);

  void
  X_parser (const ::xml_schema::parser_map&);

  void
  Y_parser (::xml_schema::string_pskel&);

  void
  Y_parser (const ::xml_schema::parser_map&);

  void
  Z_parser (::xml_schema::string_pskel&);

  void
  Z_parser (const ::xml_schema::parser_map&);

  void
  SigmaXX_parser (::xml_schema::string_pskel&);

  void
  SigmaXX_parser (const ::xml_schema::parser_map&);

  void
  SigmaXY_parser (::xml_schema::string_pskel&);

  void
  SigmaXY_parser (const ::xml_schema::parser_map&);

  void
  SigmaXZ_parser (::xml_schema::string_pskel&);

  void
  SigmaXZ_parser (const ::xml_schema::parser_map&);

  void
  SigmaYY_parser (::xml_schema::string_pskel&);

  void
  SigmaYY_parser (const ::xml_schema::parser_map&);

  void
  SigmaYZ_parser (::xml_schema::string_pskel&);

  void
  SigmaYZ_parser (const ::xml_schema::parser_map&);

  void
  SigmaZZ_parser (::xml_schema::string_pskel&);

  void
  SigmaZZ_parser (const ::xml_schema::parser_map&);

  void
  GPSCovariance_parser (::GPSCovariance_pskel&);

  void
  parsers (::xml_schema::string_pskel& /* X */,
           ::xml_schema::string_pskel& /* Y */,
           ::xml_schema::string_pskel& /* Z */,
           ::xml_schema::string_pskel& /* SigmaXX */,
           ::xml_schema::string_pskel& /* SigmaXY */,
           ::xml_schema::string_pskel& /* SigmaXZ */,
           ::xml_schema::string_pskel& /* SigmaYY */,
           ::xml_schema::string_pskel& /* SigmaYZ */,
           ::xml_schema::string_pskel& /* SigmaZZ */,
           ::GPSCovariance_pskel& /* GPSCovariance */);

  // Constructor.
  //
  GPSBaseline_pskel ();

  public:
  static const char*
  _static_type ();

  virtual const char*
  _dynamic_type () const;

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::string_pskel* X_parser_;
  const ::xml_schema::parser_map* X_parser_map_;

  ::xml_schema::string_pskel* Y_parser_;
  const ::xml_schema::parser_map* Y_parser_map_;

  ::xml_schema::string_pskel* Z_parser_;
  const ::xml_schema::parser_map* Z_parser_map_;

  ::xml_schema::string_pskel* SigmaXX_parser_;
  const ::xml_schema::parser_map* SigmaXX_parser_map_;

  ::xml_schema::string_pskel* SigmaXY_parser_;
  const ::xml_schema::parser_map* SigmaXY_parser_map_;

  ::xml_schema::string_pskel* SigmaXZ_parser_;
  const ::xml_schema::parser_map* SigmaXZ_parser_map_;

  ::xml_schema::string_pskel* SigmaYY_parser_;
  const ::xml_schema::parser_map* SigmaYY_parser_map_;

  ::xml_schema::string_pskel* SigmaYZ_parser_;
  const ::xml_schema::parser_map* SigmaYZ_parser_map_;

  ::xml_schema::string_pskel* SigmaZZ_parser_;
  const ::xml_schema::parser_map* SigmaZZ_parser_map_;

  ::GPSCovariance_pskel* GPSCovariance_parser_;

  protected:
  struct v_state_descr_
  {
    void (::GPSBaseline_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string*,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsd::cxx::parser::pod_stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);
};

class GPSCovariance_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  m11 (const ::std::string&);

  virtual void
  m12 (const ::std::string&);

  virtual void
  m13 (const ::std::string&);

  virtual void
  m21 (const ::std::string&);

  virtual void
  m22 (const ::std::string&);

  virtual void
  m23 (const ::std::string&);

  virtual void
  m31 (const ::std::string&);

  virtual void
  m32 (const ::std::string&);

  virtual void
  m33 (const ::std::string&);

  virtual ::arma::mat33
  post_GPSCovariance () = 0;

  // Parser construction API.
  //
  void
  m11_parser (::xml_schema::string_pskel&);

  void
  m11_parser (const ::xml_schema::parser_map&);

  void
  m12_parser (::xml_schema::string_pskel&);

  void
  m12_parser (const ::xml_schema::parser_map&);

  void
  m13_parser (::xml_schema::string_pskel&);

  void
  m13_parser (const ::xml_schema::parser_map&);

  void
  m21_parser (::xml_schema::string_pskel&);

  void
  m21_parser (const ::xml_schema::parser_map&);

  void
  m22_parser (::xml_schema::string_pskel&);

  void
  m22_parser (const ::xml_schema::parser_map&);

  void
  m23_parser (::xml_schema::string_pskel&);

  void
  m23_parser (const ::xml_schema::parser_map&);

  void
  m31_parser (::xml_schema::string_pskel&);

  void
  m31_parser (const ::xml_schema::parser_map&);

  void
  m32_parser (::xml_schema::string_pskel&);

  void
  m32_parser (const ::xml_schema::parser_map&);

  void
  m33_parser (::xml_schema::string_pskel&);

  void
  m33_parser (const ::xml_schema::parser_map&);

  void
  parsers (::xml_schema::string_pskel& /* m11 */,
           ::xml_schema::string_pskel& /* m12 */,
           ::xml_schema::string_pskel& /* m13 */,
           ::xml_schema::string_pskel& /* m21 */,
           ::xml_schema::string_pskel& /* m22 */,
           ::xml_schema::string_pskel& /* m23 */,
           ::xml_schema::string_pskel& /* m31 */,
           ::xml_schema::string_pskel& /* m32 */,
           ::xml_schema::string_pskel& /* m33 */);

  // Constructor.
  //
  GPSCovariance_pskel ();

  public:
  static const char*
  _static_type ();

  virtual const char*
  _dynamic_type () const;

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::string_pskel* m11_parser_;
  const ::xml_schema::parser_map* m11_parser_map_;

  ::xml_schema::string_pskel* m12_parser_;
  const ::xml_schema::parser_map* m12_parser_map_;

  ::xml_schema::string_pskel* m13_parser_;
  const ::xml_schema::parser_map* m13_parser_map_;

  ::xml_schema::string_pskel* m21_parser_;
  const ::xml_schema::parser_map* m21_parser_map_;

  ::xml_schema::string_pskel* m22_parser_;
  const ::xml_schema::parser_map* m22_parser_map_;

  ::xml_schema::string_pskel* m23_parser_;
  const ::xml_schema::parser_map* m23_parser_map_;

  ::xml_schema::string_pskel* m31_parser_;
  const ::xml_schema::parser_map* m31_parser_map_;

  ::xml_schema::string_pskel* m32_parser_;
  const ::xml_schema::parser_map* m32_parser_map_;

  ::xml_schema::string_pskel* m33_parser_;
  const ::xml_schema::parser_map* m33_parser_map_;


  protected:
  struct v_state_descr_
  {
    void (::GPSCovariance_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string*,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsd::cxx::parser::pod_stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);
};

class PointCovariance_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  m11 (const ::std::string&);

  virtual void
  m12 (const ::std::string&);

  virtual void
  m13 (const ::std::string&);

  virtual void
  m21 (const ::std::string&);

  virtual void
  m22 (const ::std::string&);

  virtual void
  m23 (const ::std::string&);

  virtual void
  m31 (const ::std::string&);

  virtual void
  m32 (const ::std::string&);

  virtual void
  m33 (const ::std::string&);

  virtual ::arma::mat33
  post_PointCovariance () = 0;

  // Parser construction API.
  //
  void
  m11_parser (::xml_schema::string_pskel&);

  void
  m11_parser (const ::xml_schema::parser_map&);

  void
  m12_parser (::xml_schema::string_pskel&);

  void
  m12_parser (const ::xml_schema::parser_map&);

  void
  m13_parser (::xml_schema::string_pskel&);

  void
  m13_parser (const ::xml_schema::parser_map&);

  void
  m21_parser (::xml_schema::string_pskel&);

  void
  m21_parser (const ::xml_schema::parser_map&);

  void
  m22_parser (::xml_schema::string_pskel&);

  void
  m22_parser (const ::xml_schema::parser_map&);

  void
  m23_parser (::xml_schema::string_pskel&);

  void
  m23_parser (const ::xml_schema::parser_map&);

  void
  m31_parser (::xml_schema::string_pskel&);

  void
  m31_parser (const ::xml_schema::parser_map&);

  void
  m32_parser (::xml_schema::string_pskel&);

  void
  m32_parser (const ::xml_schema::parser_map&);

  void
  m33_parser (::xml_schema::string_pskel&);

  void
  m33_parser (const ::xml_schema::parser_map&);

  void
  parsers (::xml_schema::string_pskel& /* m11 */,
           ::xml_schema::string_pskel& /* m12 */,
           ::xml_schema::string_pskel& /* m13 */,
           ::xml_schema::string_pskel& /* m21 */,
           ::xml_schema::string_pskel& /* m22 */,
           ::xml_schema::string_pskel& /* m23 */,
           ::xml_schema::string_pskel& /* m31 */,
           ::xml_schema::string_pskel& /* m32 */,
           ::xml_schema::string_pskel& /* m33 */);

  // Constructor.
  //
  PointCovariance_pskel ();

  public:
  static const char*
  _static_type ();

  virtual const char*
  _dynamic_type () const;

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::string_pskel* m11_parser_;
  const ::xml_schema::parser_map* m11_parser_map_;

  ::xml_schema::string_pskel* m12_parser_;
  const ::xml_schema::parser_map* m12_parser_map_;

  ::xml_schema::string_pskel* m13_parser_;
  const ::xml_schema::parser_map* m13_parser_map_;

  ::xml_schema::string_pskel* m21_parser_;
  const ::xml_schema::parser_map* m21_parser_map_;

  ::xml_schema::string_pskel* m22_parser_;
  const ::xml_schema::parser_map* m22_parser_map_;

  ::xml_schema::string_pskel* m23_parser_;
  const ::xml_schema::parser_map* m23_parser_map_;

  ::xml_schema::string_pskel* m31_parser_;
  const ::xml_schema::parser_map* m31_parser_map_;

  ::xml_schema::string_pskel* m32_parser_;
  const ::xml_schema::parser_map* m32_parser_map_;

  ::xml_schema::string_pskel* m33_parser_;
  const ::xml_schema::parser_map* m33_parser_map_;


  protected:
  struct v_state_descr_
  {
    void (::PointCovariance_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string*,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsd::cxx::parser::pod_stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);
};

class StationCoord_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  Name (const ::std::string&);

  virtual void
  XAxis (const ::std::string&);

  virtual void
  YAxis (const ::std::string&);

  virtual void
  Height (const ::std::string&);

  virtual void
  HemisphereZone (const ::std::string&);

  virtual ::StationCoord_Struct
  post_StationCoord () = 0;

  // Parser construction API.
  //
  void
  Name_parser (::xml_schema::string_pskel&);

  void
  Name_parser (const ::xml_schema::parser_map&);

  void
  XAxis_parser (::xml_schema::string_pskel&);

  void
  XAxis_parser (const ::xml_schema::parser_map&);

  void
  YAxis_parser (::xml_schema::string_pskel&);

  void
  YAxis_parser (const ::xml_schema::parser_map&);

  void
  Height_parser (::xml_schema::string_pskel&);

  void
  Height_parser (const ::xml_schema::parser_map&);

  void
  HemisphereZone_parser (::xml_schema::string_pskel&);

  void
  HemisphereZone_parser (const ::xml_schema::parser_map&);

  void
  parsers (::xml_schema::string_pskel& /* Name */,
           ::xml_schema::string_pskel& /* XAxis */,
           ::xml_schema::string_pskel& /* YAxis */,
           ::xml_schema::string_pskel& /* Height */,
           ::xml_schema::string_pskel& /* HemisphereZone */);

  // Constructor.
  //
  StationCoord_pskel ();

  public:
  static const char*
  _static_type ();

  virtual const char*
  _dynamic_type () const;

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::string_pskel* Name_parser_;
  const ::xml_schema::parser_map* Name_parser_map_;

  ::xml_schema::string_pskel* XAxis_parser_;
  const ::xml_schema::parser_map* XAxis_parser_map_;

  ::xml_schema::string_pskel* YAxis_parser_;
  const ::xml_schema::parser_map* YAxis_parser_map_;

  ::xml_schema::string_pskel* Height_parser_;
  const ::xml_schema::parser_map* Height_parser_map_;

  ::xml_schema::string_pskel* HemisphereZone_parser_;
  const ::xml_schema::parser_map* HemisphereZone_parser_map_;


  protected:
  struct v_state_descr_
  {
    void (::StationCoord_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string*,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsd::cxx::parser::pod_stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);
};

class type_pskel: public virtual ::xml_schema::string_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  post_type ();

  public:
  static const char*
  _static_type ();

  virtual const char*
  _dynamic_type () const;
};

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // DYNA_ML_PSKEL_HXX
